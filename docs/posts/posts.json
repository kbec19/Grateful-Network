[
  {
    "path": "posts/gd-network-creation-statnet/",
    "title": "Grateful Dead Statnet Network Creation",
    "description": "Building a Grateful Dead Original Song Co-Writing Network in R using the Statnet Package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "http://gratefulnetwork.live/"
      }
    ],
    "date": "2022-05-06",
    "categories": [
      "network creation",
      "network analytics",
      "network visualization"
    ],
    "contents": "\r\n\r\nContents\r\nAffiliation Matrix\r\nBipartite Projection\r\nStatnet\r\n\r\n\r\n\r\n\r\n\r\nAffiliation Matrix\r\nLoading the dataset and creating the network to begin my\r\nanalysis:\r\n\r\n\r\n\r\nInspecting the first 8 columns of the data structure in the\r\naffiliation matrix format:\r\n\r\n[1]  26 183\r\n               Alabama Getaway Alice D Millionaire Alligator Althea\r\nEric Andersen                0                   0         0      0\r\nJohn Barlow                  0                   0         0      0\r\nBob Bralove                  0                   0         0      0\r\nAndrew Charles               0                   0         0      0\r\nJohn Dawson                  0                   0         0      0\r\nWillie Dixon                 0                   0         0      0\r\nJerry Garcia                 1                   1         0      1\r\nDonna Godchaux               0                   0         0      0\r\nKeith Godchaux               0                   0         0      0\r\nGerrit Graham                0                   0         0      0\r\n\r\nBipartite Projection\r\nNow I can create the single mode network and examine the bipartite\r\nprojection. After converting the matrix to a square adjacency matrix, I\r\ncan look at the full matrix.\r\nI can also call the adjacency matrix count for co-writing incidences\r\nbetween certain songwriters, such as between writing partners Jerry\r\nGarcia and Robert Hunter (78) and between John Barlow and Bob Weir\r\n(21).\r\n\r\n[1] 26 26\r\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\r\nEric Andersen              1           0           0              0\r\nJohn Barlow                0          26           1              0\r\nBob Bralove                0           1           3              0\r\nAndrew Charles             0           0           0              1\r\nJohn Dawson                0           0           0              0\r\nWillie Dixon               0           0           0              0\r\nJerry Garcia               0           0           0              0\r\nDonna Godchaux             0           0           0              0\r\nKeith Godchaux             0           0           0              0\r\nGerrit Graham              0           0           0              0\r\n[1] 78\r\n[1] 21\r\n\r\nStatnet\r\nCoercing directly from the original affiliation matrix kept giving\r\nthe error, “Error: loops is FALSE, but\r\nx contains loops.” I tried using the “intergraph”\r\npackage, but it cannot coerce bipartite igraph networks.\r\n\r\nAfter the bipartite projection, I was able to create the statnet\r\nobject as well. I’ll come back to that later.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-06T19:39:39-04:00",
    "input_file": "gd-network-creation-statnet.knit.md"
  },
  {
    "path": "posts/gd-network-creation/",
    "title": "Grateful Network Creation: igraph",
    "description": "Building a Grateful Dead Original Song Co-Writing Network in R Using the igraph Package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "http://gratefulnetwork.live/"
      }
    ],
    "date": "2022-04-20",
    "categories": [
      "network creation",
      "network analytics",
      "network visualization"
    ],
    "contents": "\r\n\r\nContents\r\nNetwork Details\r\nBackground\r\nAffiliation Matrix\r\nBipartite Projection\r\nigraph\r\n\r\nNetwork Analysis: igraph\r\nFrom Incidence Matrix\r\nFrom Adjacency\r\nMatrix (Bipartite Projection)\r\nTriad Check\r\nTransitivity\r\nGeodesic Distance\r\nComponents\r\nDensity\r\nDegree Measure\r\nSummary Statistics\r\nNetwork Visualizations\r\nCentrality Measures\r\n\r\n\r\n\r\nNetwork Details\r\nBackground\r\nFor my project, I am using the Grateful Dead song writers data set\r\nthat I used in this series of posts from my Social & Political\r\nNetworks course to examine the network features of the co-writers of\r\noriginal Grateful Dead songs.\r\nThe data set consists of the links between co-writers of songs played\r\nby the Grateful Dead over their 30-year touring career that I\r\ncompiled.\r\nThere are 26 songwriters that contributed to the songs played over\r\nthe course of the Grateful Dead history, resulting in 26 nodes in the\r\ndataset.\r\nThere are a total of 183 (updated and still under review!) unique\r\nsongs played in the course of their touring career, and the various\r\ncombinations of co-writing combinations are now represented in a binary\r\naffiliation matrix.\r\nI have considered using various measures as network weights, but in\r\nthe end they have all been attributes and not weights. Unless there is a\r\nnew metric that rises to the forefront of my analysis, this network will\r\ncontinue to be an unweighted, bipartite matrix.\r\n\r\n\r\n\r\nAffiliation Matrix\r\nLoading the dataset and creating the network to begin my\r\nanalysis:\r\n\r\n\r\nShow code\r\n\r\ngd_affiliation <- read.csv('gd_affiliation_matrix.csv', row.names = 1, header = TRUE, check.names = FALSE)\r\ngd_matrix <- as.matrix(gd_affiliation)\r\n\r\n\r\n\r\nInspecting the first 8 columns of the data structure in the\r\naffiliation matrix format:\r\n\r\n\r\nShow code\r\n\r\ndim(gd_matrix)\r\n\r\n\r\n[1]  26 183\r\n\r\nShow code\r\n\r\ngd_matrix[1:10, 1:4]\r\n\r\n\r\n               Alabama Getaway Alice D Millionaire Alligator Althea\r\nEric Andersen                0                   0         0      0\r\nJohn Barlow                  0                   0         0      0\r\nBob Bralove                  0                   0         0      0\r\nAndrew Charles               0                   0         0      0\r\nJohn Dawson                  0                   0         0      0\r\nWillie Dixon                 0                   0         0      0\r\nJerry Garcia                 1                   1         0      1\r\nDonna Godchaux               0                   0         0      0\r\nKeith Godchaux               0                   0         0      0\r\nGerrit Graham                0                   0         0      0\r\n\r\nBipartite Projection\r\nNow I can create the single mode network and examine the bipartite\r\nprojection. After converting the matrix to a square adjacency matrix, I\r\ncan look at the full matrix.\r\nI can also call the adjacency matrix count for co-writing incidences\r\nbetween certain songwriters, such as between writing partners Jerry\r\nGarcia and Robert Hunter (78) and between John Barlow and Bob Weir\r\n(21).\r\n\r\n\r\nShow code\r\n\r\ngd_projection <- gd_matrix%*%t(gd_matrix)\r\ndim(gd_projection)\r\n\r\n\r\n[1] 26 26\r\n\r\nShow code\r\n\r\ngd_projection[1:10, 1:4]\r\n\r\n\r\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\r\nEric Andersen              1           0           0              0\r\nJohn Barlow                0          26           1              0\r\nBob Bralove                0           1           3              0\r\nAndrew Charles             0           0           0              1\r\nJohn Dawson                0           0           0              0\r\nWillie Dixon               0           0           0              0\r\nJerry Garcia               0           0           0              0\r\nDonna Godchaux             0           0           0              0\r\nKeith Godchaux             0           0           0              0\r\nGerrit Graham              0           0           0              0\r\n\r\nShow code\r\n\r\ngd_projection[\"Jerry Garcia\", \"Robert Hunter\"]\r\n\r\n\r\n[1] 78\r\n\r\nShow code\r\n\r\ngd_projection[\"John Barlow\", \"Bob Weir\"]\r\n\r\n\r\n[1] 21\r\n\r\nigraph\r\nFrom Incidence Matrix\r\nConverting network data into igraph object using the\r\n“graph_from_incidence_matrix()” function gave me all songwriters and\r\nsongs as total vertices. Graphing after the bipartite projection allowed\r\na more accurate network.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\ngd_igraph_from_im <- graph_from_incidence_matrix(gd_affiliation, directed = FALSE)\r\n\r\n\r\n\r\nFrom Adjacency Matrix\r\nConverting network data into igraph object using the\r\n“graph_from_incidence_matrix()” function gave me all songwriters and\r\nsongs as total vertices. Graphing after the bipartite projection allowed\r\na more accurate network.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\ngd_igraph_adj <- graph.adjacency(gd_projection,mode=\"undirected\")\r\n\r\n\r\n\r\nNetwork Analysis: igraph\r\nNow to check the vertices in the graph I’ve created to ensure they\r\nrepresent the data accurately, and confirm that all of the attributes\r\nhave been represented properly (the graph is undirected, unweighted, and\r\nis bipartite):\r\nFrom Incidence Matrix\r\n\r\n\r\nhead(V(gd_igraph_from_im)$name)\r\n\r\n\r\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \r\n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \r\n\r\nhead(V(gd_igraph_from_im)$type)\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nis_directed(gd_igraph_from_im)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_weighted(gd_igraph_from_im)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_bipartite(gd_igraph_from_im)\r\n\r\n\r\n[1] TRUE\r\n\r\nigraph::vertex_attr_names(gd_igraph_from_im)\r\n\r\n\r\n[1] \"type\" \"name\"\r\n\r\nigraph::edge_attr_names(gd_igraph_from_im)\r\n\r\n\r\ncharacter(0)\r\n\r\nGraphing directly from the incidence matrix gives a bipartite\r\nnetwork, but when visualizing the network it is not clear if this is the\r\nway I want to represent this data.\r\n\r\n\r\nShow code\r\n\r\nplot(gd_igraph_from_im, layout=layout.bipartite)\r\n\r\n\r\n\r\n\r\nFrom Adjacency\r\nMatrix (Bipartite Projection)\r\n\r\n\r\nhead(V(gd_igraph_adj)$name)\r\n\r\n\r\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \r\n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \r\n\r\nhead(V(gd_igraph_adj)$type)\r\n\r\n\r\nNULL\r\n\r\nis_directed(gd_igraph_adj)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_weighted(gd_igraph_adj)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_bipartite(gd_igraph_adj)\r\n\r\n\r\n[1] FALSE\r\n\r\nigraph::vertex_attr_names(gd_igraph_adj)\r\n\r\n\r\n[1] \"name\"\r\n\r\nigraph::edge_attr_names(gd_igraph_adj)\r\n\r\n\r\ncharacter(0)\r\n\r\nGraphing from the bipartite projection and using the graph from\r\nadjacency matrix function, I have a network of the songwriters only, but\r\nI need to do more digging to see if this is the best way to represent\r\nthe data.\r\n\r\n\r\nShow code\r\n\r\nplot(gd_igraph_adj)\r\n\r\n\r\n\r\n\r\nTriad Check\r\nKnowing this network has 26 vertices, I want to see if the triad\r\ncensus is working correctly by comparing the following data:\r\n\r\n\r\nShow code\r\n\r\n#possible triads in network\r\n26*25*24/6\r\n\r\n\r\n[1] 2600\r\n\r\nShow code\r\n\r\nsum(igraph::triad.census(gd_igraph_from_im))\r\n\r\n\r\n[1] 1499784\r\n\r\nThe igraph created from the incidence matrix is NOT representing the\r\ntriad census properly.\r\n\r\n\r\nShow code\r\n\r\n#possible triads in network\r\n26*25*24/6\r\n\r\n\r\n[1] 2600\r\n\r\nShow code\r\n\r\nsum(igraph::triad.census(gd_igraph_adj))\r\n\r\n\r\n[1] 2600\r\n\r\nThe igraph network created from the adjacency matrix is representing\r\nthe triad census is working the way it should be.\r\nTransitivity\r\nLooking next at the global v. average local transitivity of the\r\nnetwork:\r\n\r\n\r\nShow code\r\n\r\n#get global clustering cofficient: igraph\r\ntransitivity(gd_igraph_from_im, type=\"global\")\r\n\r\n\r\n[1] 0\r\n\r\nShow code\r\n\r\n#get average local clustering coefficient: igraph\r\ntransitivity(gd_igraph_from_im, type=\"average\")\r\n\r\n\r\n[1] 0\r\n\r\nThis is another good sign that the correct choice is to graph from\r\nthe adjacency matrix throug the bipartite projection going forward.\r\n\r\n\r\nShow code\r\n\r\n#get global clustering cofficient: igraph\r\ntransitivity(gd_igraph_adj, type=\"global\")\r\n\r\n\r\n[1] 0.5240964\r\n\r\nShow code\r\n\r\n#get average local clustering coefficient: igraph\r\ntransitivity(gd_igraph_adj, type=\"average\")\r\n\r\n\r\n[1] 0.7755587\r\n\r\nThis transitivity tells me that the average network transitivity is\r\nsignificantly higher than the global transitivity, indicating, from my\r\nstill naive network knowledge, that the overall network is generally\r\nmore loose, and that there is a more connected sub-network.\r\nGeodesic Distance\r\nLooking at the geodesic distance tells me that on average, the path\r\nlength is just over 2.\r\n\r\n\r\nShow code\r\n\r\naverage.path.length(gd_igraph_adj,directed=F)\r\n\r\n\r\n[1] 2.01\r\n\r\nComponents\r\nGetting a look at the components of the network shows that there are\r\n2 components in the network, and 25 of the 26 nodes make up the giant\r\ncomponent with 1 isolate.\r\n\r\n\r\nShow code\r\n\r\nnames(igraph::components(gd_igraph_from_im))\r\n\r\n\r\n[1] \"membership\" \"csize\"      \"no\"        \r\n\r\nShow code\r\n\r\nigraph::components(gd_igraph_from_im)$no \r\n\r\n\r\n[1] 2\r\n\r\nShow code\r\n\r\nigraph::components(gd_igraph_from_im)$csize\r\n\r\n\r\n[1] 206   3\r\n\r\nThis is a great start - now I can get to looking at the network\r\ndensity, centrality, and centralization.\r\nDensity\r\nThe network density measure: First with just the call “graph.density”\r\nand then with adding “loops=TRUE”. Since I’m using igraph, I know that\r\nits’ default output assumes that loops are not included but does not\r\nremove them, which can be corrected with the addition of “loops=TRUE”\r\nper the course tutorials when comparing output to statnet. This gives me\r\nconfidence that my network density is closer to 2.1.\r\n\r\n\r\nShow code\r\n\r\ngraph.density(gd_igraph_adj)\r\n\r\n\r\n[1] 2.270769\r\n\r\nShow code\r\n\r\ngraph.density(gd_igraph_adj, loops=TRUE)\r\n\r\n\r\n[1] 2.102564\r\n\r\nDegree Measure\r\nThe network degree measure: This gives me a clear output showing the\r\ndegree of each particular node (songwriter). It is not suprising,\r\nknowing my subject matter, that Jerry Garcia is the highest degree node\r\nin this network as the practical and figurative head of the band. The\r\nother band members’ degree measures are not necessarily what I expected,\r\nthough. I did not anticipate that his songwriting partner, Robert\r\nHunter, would have a lower degree than band members Phil Lesh and Bob\r\nWeir. Further, I did not anticipate that the degree measure of band\r\nmember ‘Pigpen’ would be so high given his early death in the first\r\nyears of the band’s touring life.\r\n\r\n\r\nShow code\r\n\r\nigraph::degree(gd_igraph_adj)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n              3              81              14               3 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n              4               4             328              12 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n             16               3               4              36 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n              4             313             100               3 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n            149               3              41               7 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n             13              95               4              10 \r\n       Bob Weir   Vince Welnick \r\n            213              13 \r\n\r\nTo look further I will begin creating a dataframe for easier review\r\ngoing forward.\r\n\r\n\r\nShow code\r\n\r\ngrateful_igraph<-data.frame(name=V(gd_igraph_adj)$name, degree=igraph::degree(gd_igraph_adj))\r\n\r\ngrateful_igraph\r\n\r\n\r\n                           name degree\r\nEric Andersen     Eric Andersen      3\r\nJohn Barlow         John Barlow     81\r\nBob Bralove         Bob Bralove     14\r\nAndrew Charles   Andrew Charles      3\r\nJohn Dawson         John Dawson      4\r\nWillie Dixon       Willie Dixon      4\r\nJerry Garcia       Jerry Garcia    328\r\nDonna Godchaux   Donna Godchaux     12\r\nKeith Godchaux   Keith Godchaux     16\r\nGerrit Graham     Gerrit Graham      3\r\nFrank Guida         Frank Guida      4\r\nMickey Hart         Mickey Hart     36\r\nBruce Hornsby     Bruce Hornsby      4\r\nRobert Hunter     Robert Hunter    313\r\nBill Kreutzmann Bill Kreutzmann    100\r\nNed Lagin             Ned Lagin      3\r\nPhil Lesh             Phil Lesh    149\r\nPeter Monk           Peter Monk      3\r\nBrent Mydland     Brent Mydland     41\r\nDave Parker         Dave Parker      7\r\nRobert Petersen Robert Petersen     13\r\nPigpen                   Pigpen     95\r\nJoe Royster         Joe Royster      4\r\nRob Wasserman     Rob Wasserman     10\r\nBob Weir               Bob Weir    213\r\nVince Welnick     Vince Welnick     13\r\n\r\nSummary Statistics\r\nA quick look at the summary statistics confirms for me the minimum,\r\nmaximum, median, and mean node degree data.\r\n\r\n\r\nShow code\r\n\r\nsummary(grateful_igraph)\r\n\r\n\r\n     name               degree      \r\n Length:26          Min.   :  3.00  \r\n Class :character   1st Qu.:  4.00  \r\n Mode  :character   Median : 12.50  \r\n                    Mean   : 56.77  \r\n                    3rd Qu.: 71.00  \r\n                    Max.   :328.00  \r\n\r\nNetwork Visualizations\r\nNow I want to take a step back and try to visually represent this\r\ndata better.\r\n\r\n\r\nShow code\r\n\r\n# Community detection algoritm \r\ncommunity <- cluster_louvain(gd_igraph_adj) \r\n\r\n# Attach communities to relevant vertices\r\nV(gd_igraph_adj)$color <- community$membership \r\n\r\n# Graph layout\r\nlayout <- layout.random(gd_igraph_adj) \r\n\r\n# igraph plot \r\nplot(gd_igraph_adj, layout = layout)\r\n\r\n\r\n\r\n\r\nBetter, but not quite.\r\n\r\n\r\nShow code\r\n\r\nggraph(gd_igraph_adj, layout = \"fr\") +\r\n  geom_edge_link() + \r\n  geom_node_point(aes(color = factor(color))) + \r\n  geom_node_text(aes(label = name), repel = TRUE) +\r\n  theme_void() +\r\n  theme(legend.position = \"none\") \r\n\r\n\r\n\r\nShow code\r\n\r\nggsave(\"igraph2.pdf\", device=\"pdf\", width=8, height=8, units=\"in\",dpi=600)\r\n\r\n\r\n\r\nThat is starting to look more meaningful!\r\n\r\n\r\n# Set size to degree centrality \r\nV(gd_igraph_adj)$size = degree=igraph::degree(gd_igraph_adj)\r\n\r\n#Additional customisation for better legibility \r\nggraph(gd_igraph_adj, layout = \"fr\") +\r\n  geom_edge_arc(strength = 0.2, width = 0.5, alpha = 0.15) + \r\n  geom_node_point(aes(size = size, color = factor(color))) + \r\n  geom_node_text(aes(label = name, size = size), repel = TRUE) +\r\n  theme_void() +\r\n  theme(legend.position = \"none\") \r\n\r\n\r\n\r\n\r\nCentrality Measures\r\nTo examine the centrality and power scores of the nodes, I created a\r\ndata frame with the centrality degree, normalized centrality, Bonacich\r\npower, rescaled Bonacich power, Eigenvector centrality scores and the\r\nbreakdown of reflected and derived centrality scores. I later added the\r\ncloseness, betweenness, and Burt centrality scores.\r\nTo calculate the reflected and derived centrality scores, I first run\r\nsome operations on the adjacency matrix and keep in mind that these two\r\nscores make up the entire calculation of the Eigenvector centrality\r\nscore.\r\n\r\n\r\nShow code\r\n\r\ngd_adjacency <- as.matrix(as_adjacency_matrix(gd_igraph_adj))\r\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\r\n\r\n#calculate Bonacich power\r\nbp_ig1 <- power_centrality(gd_igraph_adj) #with a default index of \"1\"\r\nbp_ig2 <- power_centrality(gd_igraph_adj, rescale = TRUE) #rescaled so they sum to \"1\"\r\n\r\n#calculate portion of reflected centrality\r\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\r\n\r\n#calculate derived centrality\r\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\r\n\r\n#calculate closeness centrality: igraph\r\nigraph::closeness(gd_igraph_adj)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n    0.012500000     0.012987013     0.013333333     0.012048193 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n    0.012048193     0.012658228     0.015625000     0.014285714 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n    0.014492754     0.012500000     0.011363636     0.014492754 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n    0.001538462     0.015873016     0.015384615     0.012048193 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n    0.016666667     0.012048193     0.013698630     0.014492754 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n    0.012345679     0.015151515     0.011363636     0.013333333 \r\n       Bob Weir   Vince Welnick \r\n    0.017543860     0.013157895 \r\n\r\nShow code\r\n\r\n#calculate betweenness centrality: igraph\r\nigraph::betweenness(gd_igraph_adj, directed=FALSE)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n   0.000000e+00    6.708464e-01    1.216013e-01    0.000000e+00 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n   0.000000e+00    0.000000e+00    1.658436e+01    0.000000e+00 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n   9.345794e-03    0.000000e+00    0.000000e+00    3.738318e-02 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n   0.000000e+00    2.410682e+01    3.132042e+00    0.000000e+00 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n   9.039664e+01    0.000000e+00    1.306941e+00    0.000000e+00 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n   0.000000e+00    4.402857e+01    0.000000e+00    9.459707e-01 \r\n       Bob Weir   Vince Welnick \r\n   1.216595e+02    0.000000e+00 \r\n\r\nShow code\r\n\r\n#calculate Burt's network constraint\r\nconstraint(gd_igraph_adj)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n      1.0000000       0.6706222       0.4989170       1.0000000 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n      1.2945238       0.7040590       0.5061908       0.4514219 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n      0.5143887       1.0000000       0.8224000       0.5294014 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n      0.0000000       0.6332636       0.5159787       1.0000000 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n      0.4521996       1.0000000       0.9325133       0.5591083 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n      0.7134697       0.5404552       0.8224000       0.4756234 \r\n       Bob Weir   Vince Welnick \r\n      0.3367355       0.5216319 \r\n\r\nShow code\r\n\r\n#I am loading the data frame of all of these values from previous pre-knitr runs\r\n\r\ncentrality_gd_igraph <- read.csv(\"centrality_df.csv\")\r\n\r\nrow.names(centrality_gd_igraph)<-NULL\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(degree))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree normalized_degree\r\n1    Jerry Garcia  7    Jerry Garcia    328             13.12\r\n2   Robert Hunter 14   Robert Hunter    313             12.52\r\n3        Bob Weir 25        Bob Weir    213              8.52\r\n4       Phil Lesh 17       Phil Lesh    149              5.96\r\n5 Bill Kreutzmann 15 Bill Kreutzmann    100              4.00\r\n    bonacich bonacich_scaled eigenvector reflect_eigen derive_eigen\r\n1 -0.2551417     -0.04726227  0.96094165   0.332625452   0.62831620\r\n2 -0.1735142     -0.03214165  1.00000000   0.371327549   0.62867245\r\n3 -0.5430836     -0.10060043  0.18725953   0.040709421   0.14655011\r\n4 -0.1806656     -0.03346637  0.15133380   0.022140576   0.12919322\r\n5 -0.7011548     -0.12988143  0.09223647   0.009710558   0.08252591\r\n   closeness betweenness      burt\r\n1 0.01562500   16.584364 0.5061908\r\n2 0.01587302   24.106816 0.6332636\r\n3 0.01754386  121.659478 0.3367355\r\n4 0.01666667   90.396640 0.4521996\r\n5 0.01538462    3.132042 0.5159787\r\n\r\nRight away, I see the highest degree are clearly Jerry Garcia and\r\nRobert Hunter, which makes sense given that they were a songwriting pair\r\nthat were prolific in creating the Grateful Dead original songbook. Bob\r\nWeir also contributed quite a bit, though the songs he wrote with his\r\nwriting partner John Barlow numbered many less than those that he wrote\r\nas part of the whole band, judging by Barlow’s absence in the top\r\ncounts.\r\nThe original lineup of Jerry Garcia, Bob Weir, Phil Lesh, Bill\r\nKreutzmann, and Pigpen as well as Robert Hunter’s presence in the\r\nformative years of the band’s most collaborative era, means that this\r\ndegree ranking makes sense intuitively.\r\nEigenvector Centrality\r\nI am also interested in the Eigenvector centrality scores - Both the\r\ntop as well as the lowest value scores.\r\n\r\n\r\nShow code\r\n\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(eigenvector))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree normalized_degree\r\n1   Robert Hunter 14   Robert Hunter    313             12.52\r\n2    Jerry Garcia  7    Jerry Garcia    328             13.12\r\n3        Bob Weir 25        Bob Weir    213              8.52\r\n4       Phil Lesh 17       Phil Lesh    149              5.96\r\n5 Bill Kreutzmann 15 Bill Kreutzmann    100              4.00\r\n    bonacich bonacich_scaled eigenvector reflect_eigen derive_eigen\r\n1 -0.1735142     -0.03214165  1.00000000   0.371327549   0.62867245\r\n2 -0.2551417     -0.04726227  0.96094165   0.332625452   0.62831620\r\n3 -0.5430836     -0.10060043  0.18725953   0.040709421   0.14655011\r\n4 -0.1806656     -0.03346637  0.15133380   0.022140576   0.12919322\r\n5 -0.7011548     -0.12988143  0.09223647   0.009710558   0.08252591\r\n   closeness betweenness      burt\r\n1 0.01587302   24.106816 0.6332636\r\n2 0.01562500   16.584364 0.5061908\r\n3 0.01754386  121.659478 0.3367355\r\n4 0.01666667   90.396640 0.4521996\r\n5 0.01538462    3.132042 0.5159787\r\n\r\nRobert Hunter having the top Eigenvector centrality score is not a\r\nshock - he has long held the unofficial title of band member and as the\r\nperson behind the songwriting magic of the Grateful Dead. His primary\r\nsongwriting partner was Jerry Garcia, but he also wrote songs with the\r\nearly, full band and later with almost all of the individual members of\r\nthe band.\r\nIt is a little surprising, though, that the Eigenvector scores fall\r\noff so quickly after Robert Hunter and Jerry Garcia.\r\nCloseness\r\nThe closeness centrality of a node is defined as the sum of the\r\ngeodesic distances between that node and all other nodes in a\r\nnetwork.\r\n\r\n\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(closeness))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree normalized_degree\r\n1        Bob Weir 25        Bob Weir    213              8.52\r\n2       Phil Lesh 17       Phil Lesh    149              5.96\r\n3   Robert Hunter 14   Robert Hunter    313             12.52\r\n4    Jerry Garcia  7    Jerry Garcia    328             13.12\r\n5 Bill Kreutzmann 15 Bill Kreutzmann    100              4.00\r\n    bonacich bonacich_scaled eigenvector reflect_eigen derive_eigen\r\n1 -0.5430836     -0.10060043  0.18725953   0.040709421   0.14655011\r\n2 -0.1806656     -0.03346637  0.15133380   0.022140576   0.12919322\r\n3 -0.1735142     -0.03214165  1.00000000   0.371327549   0.62867245\r\n4 -0.2551417     -0.04726227  0.96094165   0.332625452   0.62831620\r\n5 -0.7011548     -0.12988143  0.09223647   0.009710558   0.08252591\r\n   closeness betweenness      burt\r\n1 0.01754386  121.659478 0.3367355\r\n2 0.01666667   90.396640 0.4521996\r\n3 0.01587302   24.106816 0.6332636\r\n4 0.01562500   16.584364 0.5061908\r\n5 0.01538462    3.132042 0.5159787\r\n\r\nThis evaluation is more difficult as the range is made up of much\r\nless clearly defined scores.\r\nIn addition to node-level centrality scores, I also want to calculate\r\nthe network level centralization index for closeness centrality\r\nmeasures. Originally, I got a warning that closeness centrality is not\r\nwell-defined for disconnected graphs. After re-running the commands, I\r\nget a network level closeness measure of 0.231.\r\n\r\n\r\n#calculate closeness centralization index: igraph\r\ncentr_clo(gd_igraph_adj)$centralization\r\n\r\n\r\n[1] 0.2310331\r\n\r\nBetweenness\r\nBetweenness represents the number of geodesics on which a node\r\nsits.\r\nNow I want to add the closeness and betweenness to my centrality data\r\nframe and first, sort by and take a look at the nodes with the highest\r\nbetweenness:\r\n\r\n\r\nShow code\r\n\r\nrow.names(centrality_gd_igraph)<-NULL\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(betweenness))%>%\r\n  slice(1:5)\r\n\r\n\r\n              X id          name degree normalized_degree   bonacich\r\n1      Bob Weir 25      Bob Weir    213              8.52 -0.5430836\r\n2     Phil Lesh 17     Phil Lesh    149              5.96 -0.1806656\r\n3        Pigpen 22        Pigpen     95              3.80 -0.5257366\r\n4 Robert Hunter 14 Robert Hunter    313             12.52 -0.1735142\r\n5  Jerry Garcia  7  Jerry Garcia    328             13.12 -0.2551417\r\n  bonacich_scaled eigenvector reflect_eigen derive_eigen  closeness\r\n1     -0.10060043  0.18725953   0.040709421   0.14655011 0.01754386\r\n2     -0.03346637  0.15133380   0.022140576   0.12919322 0.01666667\r\n3     -0.09738708  0.07985305   0.009031643   0.07082141 0.01515152\r\n4     -0.03214165  1.00000000   0.371327549   0.62867245 0.01587302\r\n5     -0.04726227  0.96094165   0.332625452   0.62831620 0.01562500\r\n  betweenness      burt\r\n1   121.65948 0.3367355\r\n2    90.39664 0.4521996\r\n3    44.02857 0.5404552\r\n4    24.10682 0.6332636\r\n5    16.58436 0.5061908\r\n\r\nThe most immediate observations I have is that the highest degree\r\nnode (Jerry Garcia) is not the node with the highest scoring\r\nbetweenness. That goes to Bob Weir, who is still a relatively high\r\ndegree node, but significantly lower than Jerry Garcia given that his\r\nbetweenness score is so much higher (~121 compared to Garcia’s ~16).\r\nI can make a guess that the two highest degree nodes, Jerry Garcia\r\nand Robert Hunter, having relatively low betweenness scores can be\r\nlinked to the fact that the two wrote mostly together. Although the pair\r\nwrote the most songs in the originals catalog, Bob Weir wrote many songs\r\nwith a variety of other songwrriters; giving him a higher level of\r\nbetweenness.\r\nSimilarly, Phil Lesh and Pigpen, original band members who wrote\r\nrelatively fewer songs, contributed to more songs that were written by\r\nthe entire band, giving them more exposure to connections on the songs\r\nthat they did write.\r\nNetwork Constraint (Burt)\r\nConstraint is a measure of the redundancy of a node’s connections. It\r\nis bound between 0 and 1, with 0 being a complete lack, and 1 being\r\ncomplete redundancy.\r\n\r\n\r\nShow code\r\n\r\ncentrality_gd_igraph %>%\r\n  arrange(desc(burt))%>%\r\n  slice(1:5)\r\n\r\n\r\n               X id           name degree normalized_degree\r\n1    John Dawson  5    John Dawson      4              0.16\r\n2  Eric Andersen  1  Eric Andersen      3              0.12\r\n3 Andrew Charles  4 Andrew Charles      3              0.12\r\n4  Gerrit Graham 10  Gerrit Graham      3              0.12\r\n5      Ned Lagin 16      Ned Lagin      3              0.12\r\n     bonacich bonacich_scaled eigenvector reflect_eigen derive_eigen\r\n1  0.09708065      0.01798315 0.007176110      4.75e-05  0.007128586\r\n2 -0.28021531     -0.05190689 0.000685280      8.51e-06  0.000676768\r\n3  0.08220268      0.01522717 0.000553809      9.47e-06  0.000544343\r\n4 -0.28021531     -0.05190689 0.000685280      8.51e-06  0.000676768\r\n5  0.08220268      0.01522717 0.000553809      9.47e-06  0.000544343\r\n   closeness betweenness     burt\r\n1 0.01204819           0 1.294524\r\n2 0.01250000           0 1.000000\r\n3 0.01204819           0 1.000000\r\n4 0.01250000           0 1.000000\r\n5 0.01204819           0 1.000000\r\n\r\nAfter all the closeness calculations, I saved the data frame for\r\nfurther analysis.\r\n\r\n\r\nShow code\r\n\r\n#centrality_gd_igraph <-data.frame(id=1:vcount(gd_igraph_adj),\r\n                        #name=V(gd_igraph_adj)$name,\r\n                        #degree=igraph::degree(gd_igraph_adj),\r\n                        #normalized_degree=igraph::degree(gd_igraph_adj,normalized=T),\r\n                        #bonacich=power_centrality(gd_igraph_adj),\r\n                        #bonacich_scaled=power_centrality(gd_igraph_adj),\r\n                        #eigenvector=centr_eigen(gd_igraph_adj,directed = F)$vector,\r\n                        #reflect_eigen=gd_reflective*centr_eigen(gd_igraph_adj,directed = F)$vector,\r\n                        #derive_eigen=gd_derived*centr_eigen(gd_igraph_adj,directed = F)$vector,\r\n                        #closeness=closeness(gd_igraph_adj),\r\n                        #betweenness=betweenness(gd_igraph_adj, directed=FALSE),\r\n                        #burt=constraint(gd_igraph_adj))\r\n\r\n#write.csv(centrality_gd_igraph, file = \"centrality_df.csv\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-08T18:03:23-04:00",
    "input_file": "gd-network-creation.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the Grateful Network Project",
    "description": "This is an Ongoing Project Exploring the Grateful Dead Original Song Co-Writing Network",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://kbec19.github.io/Grateful-Network/"
      }
    ],
    "date": "2022-03-25",
    "categories": [
      "grateful network"
    ],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-06T19:38:47-04:00",
    "input_file": "welcome.knit.md"
  }
]
