[
  {
    "path": "posts/gd-network-creation/",
    "title": "Grateful Network Creation",
    "description": "Building a Grateful Dead Original Song Co-Writing Network in R",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://kbec19.github.io/Grateful-Network/"
      }
    ],
    "date": "2022-04-20",
    "categories": [
      "network creation",
      "network analytics"
    ],
    "contents": "\r\n\r\nContents\r\nNetwork Details\r\nBackground\r\nAffiliation Matrix\r\nBipartite Projection\r\nigraph\r\nstatnet\r\n\r\nNetwork Analysis: igraph\r\nCentrality Scores:\r\nIgraph\r\nEigenvector Centrality\r\nCloseness\r\nBetweenness\r\nTop Closeness\r\nNetwork Constraint\r\n(Burt)\r\nNetwork Analysis:\r\nStatnet\r\n\r\n\r\nNetwork Details\r\nBackground\r\nFor my project, I am using the Grateful Dead song writers data set\r\nthat I used in this series of posts from my Social & Political\r\nNetworks course to examine the network features of the co-writers of\r\noriginal Grateful Dead songs.\r\nThe data set consists of the contributors to the original songs\r\nplayed by the Grateful Dead over their 30-year touring career that I\r\ncompiled.\r\nThere are 26 songwriters that contributed to the songs played over\r\nthe course of the Grateful Dead history, resulting in 26 nodes in the\r\ndataset.\r\nThere are a total of 183 (updated and still under review!) unique\r\nsongs played, and the various combinations of co-writing combinations\r\nare represented in a binary affiliation matrix.\r\nI have not weighted this version of the data; I have considered using\r\nvarious measures as network weights, but in the end they have all been\r\nattributes and not weights. Unless there is a new metric that rises to\r\nthe forefront of my analysis, this network will continue to be\r\nunweighted.\r\n\r\n\r\n\r\nIn this example, I used a node list where unique IDs are numbers\r\nwhich correspond to the name of a songwriter.\r\nThe edgelist is in a separate spreadsheet where the first two columns\r\nare the IDs of the source and the target node (songwriter ID),\r\nregardless of whether the network is directed, for each edge. Each row\r\ncontains an observation of a connection between writers for a given\r\nsong, and since there are multiple collaborations, there may be multiple\r\nrows of writer combinations for a given song ID. If there was only one\r\nwriter on a song, that songwriter’s ID is indicated in both the source\r\nand target column for that song.\r\nThe following columns are edge attributes. In my edgelist, I have the\r\ntwo songwriters representing the co-writing relationship in columns “1”\r\nand “2”, the song ID in column “3”, the song name in column “4”, and the\r\nnumber of times the corresponding song was played live is indicated in\r\ncolumn “5”.\r\nI have NOT utilized the number of times the song was played live as a\r\nnetwork weight at this point. Additionally, this edgelist format is not\r\nthe ideal format, but it is the first step in the process I am working\r\nthrough to utilize different methods of working through the data. In the\r\nnext post, I will use the data in the form of an affiliation matrix.\r\nAffiliation Matrix\r\nLoading the dataset and creating the network to begin my\r\nanalysis:\r\n\r\n\r\nShow code\r\n\r\ngd_nodes <- read.csv('gd_nodes.csv', row.names = 1, header = TRUE, check.names = FALSE)\r\ngd_affiliation <- read.csv('gd_affiliation_matrix.csv', row.names = 1, header = TRUE, check.names = FALSE)\r\ngd_matrix <- as.matrix(gd_affiliation)\r\n\r\n\r\n\r\nInspecting the first 8 columns of the data structure in the\r\naffiliation matrix format:\r\n\r\n\r\nShow code\r\n\r\ndim(gd_matrix)\r\n\r\n\r\n[1]  26 183\r\n\r\nShow code\r\n\r\ngd_matrix[1:10, 1:4]\r\n\r\n\r\n               Alabama Getaway Alice D Millionaire Alligator Althea\r\nEric Andersen                0                   0         0      0\r\nJohn Barlow                  0                   0         0      0\r\nBob Bralove                  0                   0         0      0\r\nAndrew Charles               0                   0         0      0\r\nJohn Dawson                  0                   0         0      0\r\nWillie Dixon                 0                   0         0      0\r\nJerry Garcia                 1                   1         0      1\r\nDonna Godchaux               0                   0         0      0\r\nKeith Godchaux               0                   0         0      0\r\nGerrit Graham                0                   0         0      0\r\n\r\nBipartite Projection\r\nNow I can create the single mode network and examine the bipartite\r\nprojection. After converting the matrix to a square adjacency matrix, I\r\ncan look at the full matrix.\r\nI can also call the adjacency matrix count for co-writing incidences\r\nbetween certain songwriters, such as between writing partners Jerry\r\nGarcia and Robert Hunter (78) and between John Barlow and Bob Weir\r\n(21).\r\n\r\n\r\nShow code\r\n\r\ngd_projection <- gd_matrix%*%t(gd_matrix)\r\ndim(gd_projection)\r\n\r\n\r\n[1] 26 26\r\n\r\nShow code\r\n\r\ngd_projection[1:10, 1:4]\r\n\r\n\r\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\r\nEric Andersen              1           0           0              0\r\nJohn Barlow                0          26           1              0\r\nBob Bralove                0           1           3              0\r\nAndrew Charles             0           0           0              1\r\nJohn Dawson                0           0           0              0\r\nWillie Dixon               0           0           0              0\r\nJerry Garcia               0           0           0              0\r\nDonna Godchaux             0           0           0              0\r\nKeith Godchaux             0           0           0              0\r\nGerrit Graham              0           0           0              0\r\n\r\nShow code\r\n\r\ngd_projection[\"Jerry Garcia\", \"Robert Hunter\"]\r\n\r\n\r\n[1] 78\r\n\r\nShow code\r\n\r\ngd_projection[\"John Barlow\", \"Bob Weir\"]\r\n\r\n\r\n[1] 21\r\n\r\nigraph\r\nConverting network data into igraph object using the\r\n“graph_from_incidence_matrix()” function gave me all songwriters and\r\nsongs as total vertices. Graphing after the bipartite projection allowed\r\na more accurate network.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\n#gd_igraph <- graph_from_incidence_matrix(gd_matrix, directed = FALSE)\r\n\r\ngd_igraph <- graph.adjacency(gd_projection,mode=\"undirected\") #igraph object\r\n\r\n\r\n\r\nstatnet\r\nCoercing directly from the original affiliation matrix kept giving\r\nthe error, “Error: loops is FALSE, but\r\nx contains loops.” I tried using the “intergraph”\r\npackage, but it cannot coerce bipartite igraph networks.\r\n\r\nAfter the bipartite projection, I was able to create the statnet\r\nobject as well.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\n#gd_statnet <- as.network(gd_affiliation,\r\n               #directed = FALSE, \r\n               #bipartite = TRUE,\r\n               #loops = FALSE)\r\n\r\n#library(intergraph)\r\n#gd_intergraph <- asNetwork(gd_igraph)\r\n#print(gd_intergraph)\r\n\r\n#detach(\"package:statnet\")\r\n\r\ngd_statnet <- network(gd_projection, directed=F, matrix.type=\"adjacency\", bipartite = TRUE) #statnet object\r\n\r\n\r\n\r\nNow to check the vertices in the graph I’ve created to ensure they\r\nrepresent the data accurately, and confirm that all of the attributes\r\nhave been represented properly (the graph is undirected, unweighted, and\r\nis bipartite):\r\n\r\n\r\nhead(V(gd_igraph)$name)\r\n\r\n\r\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \r\n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \r\n\r\nhead(V(gd_igraph)$type)\r\n\r\n\r\nNULL\r\n\r\nis_directed(gd_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_weighted(gd_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_bipartite(gd_igraph)\r\n\r\n\r\n[1] FALSE\r\n\r\nigraph::vertex_attr_names(gd_igraph)\r\n\r\n\r\n[1] \"name\"\r\n\r\nigraph::edge_attr_names(gd_igraph)\r\n\r\n\r\ncharacter(0)\r\n\r\nNext I want to take a first look at the network:\r\n\r\n\r\nShow code\r\n\r\nplot(gd_igraph)\r\n\r\n\r\n\r\n\r\nNetwork Analysis: igraph\r\nKnowing this network has 26 vertices, I want to see if the triad\r\ncensus is working correctly by comparing the following data, which I can\r\nconfirm it is here!\r\n\r\n\r\nShow code\r\n\r\n#possible triads in network\r\n26*25*24/6\r\n\r\n\r\n[1] 2600\r\n\r\nShow code\r\n\r\nsum(igraph::triad.census(gd_igraph))\r\n\r\n\r\n[1] 2600\r\n\r\nLooking next at the global v. average local transitivity of the\r\nnetwork:\r\n\r\n\r\nShow code\r\n\r\n#get global clustering cofficient: igraph\r\ntransitivity(gd_igraph, type=\"global\")\r\n\r\n\r\n[1] 0.5240964\r\n\r\nShow code\r\n\r\n#get average local clustering coefficient: igraph\r\ntransitivity(gd_igraph, type=\"average\")\r\n\r\n\r\n[1] 0.7755587\r\n\r\nThis transitivity tells me that the average network transitivity is\r\nsignificantly higher than the global transitivity, indicating, from my\r\nstill naive network knowledge, that the overall network is generally\r\nmore loose, and that there is a more connected sub-network.\r\nLooking at the geodesic distance tells me that on average, the path\r\nlength is just over 2.\r\n\r\n\r\nShow code\r\n\r\naverage.path.length(gd_igraph,directed=F)\r\n\r\n\r\n[1] 2.01\r\n\r\nGetting a look at the components of the network shows that there are\r\n2 components in the network, and 25 of the 26 nodes make up the giant\r\ncomponent with 1 isolate.\r\n\r\n\r\nShow code\r\n\r\nnames(igraph::components(gd_igraph))\r\n\r\n\r\n[1] \"membership\" \"csize\"      \"no\"        \r\n\r\nShow code\r\n\r\nigraph::components(gd_igraph)$no \r\n\r\n\r\n[1] 2\r\n\r\nShow code\r\n\r\nigraph::components(gd_igraph)$csize\r\n\r\n\r\n[1] 25  1\r\n\r\nThis is a great start - now I can get to looking at the network\r\ndensity, centrality, and centralization.\r\nThe network density measure: First with just the call “graph.density”\r\nand then with adding “loops=TRUE”. Since I’m using igraph, I know that\r\nits’ default output assumes that loops are not included but does not\r\nremove them, which can be corrected with the addition of “loops=TRUE”\r\nper the course tutorials when comparing output to statnet. This gives me\r\nconfidence that my network density is closer to 2.1.\r\n\r\n\r\nShow code\r\n\r\ngraph.density(gd_igraph)\r\n\r\n\r\n[1] 2.270769\r\n\r\nShow code\r\n\r\ngraph.density(gd_igraph, loops=TRUE)\r\n\r\n\r\n[1] 2.102564\r\n\r\nThe network degree measure: This gives me a clear output showing the\r\ndegree of each particular node (songwriter). It is not suprising,\r\nknowing my subject matter, that Jerry Garcia is the highest degree node\r\nin this network as the practical and figurative head of the band. The\r\nother band members’ degree measures are not necessarily what I expected,\r\nthough. I did not anticipate that his songwriting partner, Robert\r\nHunter, would have a lower degree than band members Phil Lesh and Bob\r\nWeir. Further, I did not anticipate that the degree measure of band\r\nmember ‘Pigpen’ would be so high given his early death in the first\r\nyears of the band’s touring life.\r\n\r\n\r\nShow code\r\n\r\nigraph::degree(gd_igraph)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n              3              81              14               3 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n              4               4             328              12 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n             16               3               4              36 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n              4             313             100               3 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n            149               3              41               7 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n             13              95               4              10 \r\n       Bob Weir   Vince Welnick \r\n            213              13 \r\n\r\nTo look further I will create a dataframe for easier review going\r\nforward.\r\n\r\n\r\nShow code\r\n\r\ngrateful_igraph<-data.frame(name=V(gd_igraph)$name, degree=igraph::degree(gd_igraph))\r\n\r\ngrateful_igraph\r\n\r\n\r\n                           name degree\r\nEric Andersen     Eric Andersen      3\r\nJohn Barlow         John Barlow     81\r\nBob Bralove         Bob Bralove     14\r\nAndrew Charles   Andrew Charles      3\r\nJohn Dawson         John Dawson      4\r\nWillie Dixon       Willie Dixon      4\r\nJerry Garcia       Jerry Garcia    328\r\nDonna Godchaux   Donna Godchaux     12\r\nKeith Godchaux   Keith Godchaux     16\r\nGerrit Graham     Gerrit Graham      3\r\nFrank Guida         Frank Guida      4\r\nMickey Hart         Mickey Hart     36\r\nBruce Hornsby     Bruce Hornsby      4\r\nRobert Hunter     Robert Hunter    313\r\nBill Kreutzmann Bill Kreutzmann    100\r\nNed Lagin             Ned Lagin      3\r\nPhil Lesh             Phil Lesh    149\r\nPeter Monk           Peter Monk      3\r\nBrent Mydland     Brent Mydland     41\r\nDave Parker         Dave Parker      7\r\nRobert Petersen Robert Petersen     13\r\nPigpen                   Pigpen     95\r\nJoe Royster         Joe Royster      4\r\nRob Wasserman     Rob Wasserman     10\r\nBob Weir               Bob Weir    213\r\nVince Welnick     Vince Welnick     13\r\n\r\nA quick look at the summary statistics confirms for me the minimum,\r\nmaximum, median, and mean node degree data.\r\n\r\n\r\nShow code\r\n\r\nsummary(grateful_igraph)\r\n\r\n\r\n     name               degree      \r\n Length:26          Min.   :  3.00  \r\n Class :character   1st Qu.:  4.00  \r\n Mode  :character   Median : 12.50  \r\n                    Mean   : 56.77  \r\n                    3rd Qu.: 71.00  \r\n                    Max.   :328.00  \r\n\r\nNow I want to take a step back and try to visually represent this\r\ndata better.\r\n\r\n\r\nShow code\r\n\r\n# Community detection algoritm \r\ncommunity <- cluster_louvain(gd_igraph) \r\n\r\n# Attach communities to relevant vertices\r\nV(gd_igraph)$color <- community$membership \r\n\r\n# Graph layout\r\nlayout <- layout.random(gd_igraph) \r\n\r\n# igraph plot \r\nplot(gd_igraph, layout = layout)\r\n\r\n\r\n\r\n\r\nBetter, but not quite.\r\n\r\n\r\nShow code\r\n\r\nggraph(gd_igraph, layout = \"fr\") +\r\n  geom_edge_link() + \r\n  geom_node_point(aes(color = factor(color))) + \r\n  geom_node_text(aes(label = name), repel = TRUE) +\r\n  theme_void() +\r\n  theme(legend.position = \"none\") \r\n\r\n\r\n\r\n\r\nThat is starting to look more meaningful!\r\n\r\n\r\n# Set size to degree centrality \r\nV(gd_igraph)$size = degree(grateful_igraph)\r\n\r\n# Additional customisation for better legibility \r\nggraph(gd_igraph, layout = \"fr\") +\r\n  geom_edge_arc(strength = 0.2, width = 0.5, alpha = 0.15) + \r\n  geom_node_point(aes(size = size, color = factor(color))) + \r\n  geom_node_text(aes(label = name, size = size), repel = TRUE) +\r\n  theme_void() +\r\n  theme(legend.position = \"none\") \r\n\r\n\r\n\r\n\r\nCentrality Scores: Igraph\r\nTo examine the centrality and power scores of the nodes, I created a\r\ndata frame with the centrality degree, normalized centrality, Bonacich\r\npower, Eigenvector centrality scores and the breakdown of reflected and\r\nderived centrality scores. I later added the closeness, betweenness, and\r\nBurt centrality scores.\r\nTo calculate the reflected and derived centrality scores, I first run\r\nsome operations on the adjacency matrix and keep in mind that these two\r\nscores make up the entire calculation of the Eigenvector centrality\r\nscore.\r\n\r\n\r\nShow code\r\n\r\ngd_adjacency <- as.matrix(as_adjacency_matrix(gd_igraph))\r\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\r\n\r\n#calculate Bonacich power\r\n#bp_ig1 <- bonpow(gd_igraph) #with a default index of \"1\"\r\n\r\n#calculate portion of reflected centrality\r\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\r\n\r\n#calculate derived centrality\r\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\r\n\r\n#calculate closeness centrality: igraph\r\nigraph::closeness(gd_igraph)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n    0.012500000     0.012987013     0.013333333     0.012048193 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n    0.012048193     0.012658228     0.015625000     0.014285714 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n    0.014492754     0.012500000     0.011363636     0.014492754 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n    0.001538462     0.015873016     0.015384615     0.012048193 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n    0.016666667     0.012048193     0.013698630     0.014492754 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n    0.012345679     0.015151515     0.011363636     0.013333333 \r\n       Bob Weir   Vince Welnick \r\n    0.017543860     0.013157895 \r\n\r\nShow code\r\n\r\n#calculate betweenness centrality: igraph\r\nigraph::betweenness(gd_igraph, directed=FALSE)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n   0.000000e+00    6.708464e-01    1.216013e-01    0.000000e+00 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n   0.000000e+00    0.000000e+00    1.658436e+01    0.000000e+00 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n   9.345794e-03    0.000000e+00    0.000000e+00    3.738318e-02 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n   0.000000e+00    2.410682e+01    3.132042e+00    0.000000e+00 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n   9.039664e+01    0.000000e+00    1.306941e+00    0.000000e+00 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n   0.000000e+00    4.402857e+01    0.000000e+00    9.459707e-01 \r\n       Bob Weir   Vince Welnick \r\n   1.216595e+02    0.000000e+00 \r\n\r\nShow code\r\n\r\n#calculate Burt's network constraint\r\nconstraint(gd_igraph)\r\n\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n      1.0000000       0.6706222       0.4989170       1.0000000 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n      1.2945238       0.7040590       0.5061908       0.4514219 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n      0.5143887       1.0000000       0.8224000       0.5294014 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n      0.0000000       0.6332636       0.5159787       1.0000000 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n      0.4521996       1.0000000       0.9325133       0.5591083 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n      0.7134697       0.5404552       0.8224000       0.4756234 \r\n       Bob Weir   Vince Welnick \r\n      0.3367355       0.5216319 \r\n\r\nShow code\r\n\r\n#I am loading the data frame of all of these values from previous pre-knitr runs\r\n\r\ncentrality_gd_igraph <- read.csv(\"centrality_df.csv\")\r\n\r\nrow.names(centrality_gd_igraph)<-NULL\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(degree_all))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree_all degree_norm\r\n1    Jerry Garcia  7    Jerry Garcia        328       13.12\r\n2   Robert Hunter 14   Robert Hunter        313       12.52\r\n3        Bob Weir 25        Bob Weir        213        8.52\r\n4       Phil Lesh 17       Phil Lesh        149        5.96\r\n5 Bill Kreutzmann 15 Bill Kreutzmann        100        4.00\r\n    BC_power    EV_cent  reflect_EV  derive_EV      close    between\r\n1 -0.2551417 0.96094165 0.332625452 0.62831620 0.01562500  16.584364\r\n2 -0.1735142 1.00000000 0.371327549 0.62867245 0.01587302  24.106816\r\n3 -0.5430836 0.18725953 0.040709421 0.14655011 0.01754386 121.659478\r\n4 -0.1806656 0.15133380 0.022140576 0.12919322 0.01666667  90.396640\r\n5 -0.7011548 0.09223647 0.009710558 0.08252591 0.01538462   3.132042\r\n       burt\r\n1 0.5061908\r\n2 0.6332636\r\n3 0.3367355\r\n4 0.4521996\r\n5 0.5159787\r\n\r\nRight away, I see the highest degree are clearly Jerry Garcia and\r\nRobert Hunter, which makes sense given that they were a songwriting pair\r\nthat were prolific in creating the Grateful Dead original songbook. Bob\r\nWeir also contributed quite a bit, though the songs he wrote with his\r\nwriting partner John Barlow numbered many less than those that he wrote\r\nas part of the whole band, judging by Barlow’s absence in the top\r\ncounts.\r\nThe original lineup of Jerry Garcia, Bob Weir, Phil Lesh, Bill\r\nKreutzmann, and Pigpen as well as Robert Hunter’s presence in the\r\nformative years of the band’s most collaborative era, means that this\r\ndegree ranking makes sense intuitively.\r\nEigenvector Centrality\r\nI am also interested in the Eigenvector centrality scores - Both the\r\ntop as well as the lowest value scores.\r\n\r\n\r\nShow code\r\n\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(EV_cent))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree_all degree_norm\r\n1   Robert Hunter 14   Robert Hunter        313       12.52\r\n2    Jerry Garcia  7    Jerry Garcia        328       13.12\r\n3        Bob Weir 25        Bob Weir        213        8.52\r\n4       Phil Lesh 17       Phil Lesh        149        5.96\r\n5 Bill Kreutzmann 15 Bill Kreutzmann        100        4.00\r\n    BC_power    EV_cent  reflect_EV  derive_EV      close    between\r\n1 -0.1735142 1.00000000 0.371327549 0.62867245 0.01587302  24.106816\r\n2 -0.2551417 0.96094165 0.332625452 0.62831620 0.01562500  16.584364\r\n3 -0.5430836 0.18725953 0.040709421 0.14655011 0.01754386 121.659478\r\n4 -0.1806656 0.15133380 0.022140576 0.12919322 0.01666667  90.396640\r\n5 -0.7011548 0.09223647 0.009710558 0.08252591 0.01538462   3.132042\r\n       burt\r\n1 0.6332636\r\n2 0.5061908\r\n3 0.3367355\r\n4 0.4521996\r\n5 0.5159787\r\n\r\nRobert Hunter having the top Eigenvector centrality score is not a\r\nshock - he has long held the unofficial title of band member and as the\r\nperson behind the songwriting magic of the Grateful Dead. His primary\r\nsongwriting partner was Jerry Garcia, but he also wrote songs with the\r\nearly, full band and later with almost all of the individual members of\r\nthe band.\r\nIt is a little surprising, though, that the Eigenvector scores fall\r\noff so quickly after Robert Hunter and Jerry Garcia.\r\nCloseness\r\nThe closeness centrality of a node is defined as the sum of the\r\ngeodesic distances between that node and all other nodes in a\r\nnetwork.\r\n\r\n\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(close))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree_all degree_norm\r\n1        Bob Weir 25        Bob Weir        213        8.52\r\n2       Phil Lesh 17       Phil Lesh        149        5.96\r\n3   Robert Hunter 14   Robert Hunter        313       12.52\r\n4    Jerry Garcia  7    Jerry Garcia        328       13.12\r\n5 Bill Kreutzmann 15 Bill Kreutzmann        100        4.00\r\n    BC_power    EV_cent  reflect_EV  derive_EV      close    between\r\n1 -0.5430836 0.18725953 0.040709421 0.14655011 0.01754386 121.659478\r\n2 -0.1806656 0.15133380 0.022140576 0.12919322 0.01666667  90.396640\r\n3 -0.1735142 1.00000000 0.371327549 0.62867245 0.01587302  24.106816\r\n4 -0.2551417 0.96094165 0.332625452 0.62831620 0.01562500  16.584364\r\n5 -0.7011548 0.09223647 0.009710558 0.08252591 0.01538462   3.132042\r\n       burt\r\n1 0.3367355\r\n2 0.4521996\r\n3 0.6332636\r\n4 0.5061908\r\n5 0.5159787\r\n\r\nIn addition to node-level centrality scores, I also want to calculate\r\nthe network level centralization index for closeness centrality\r\nmeasures. Again, I get a warning that closeness centrality is not\r\nwell-defined for disconnected graphs.\r\n\r\n\r\n#calculate closeness centralization index: igraph\r\ncentr_clo(gd_igraph)$centralization\r\n\r\n\r\n[1] 0.2310331\r\n\r\nBetweenness\r\nBetweenness represents the number of geodesics on which a node\r\nsits.\r\nNow I want to add the closeness and betweenness to my centrality data\r\nframe and first, sort by and take a look at the nodes with the highest\r\nbetweenness:\r\n\r\n\r\nShow code\r\n\r\nrow.names(centrality_gd_igraph)<-NULL\r\ncentrality_gd_igraph%>%\r\n  arrange(desc(between))%>%\r\n  slice(1:5)\r\n\r\n\r\n              X id          name degree_all degree_norm   BC_power\r\n1      Bob Weir 25      Bob Weir        213        8.52 -0.5430836\r\n2     Phil Lesh 17     Phil Lesh        149        5.96 -0.1806656\r\n3        Pigpen 22        Pigpen         95        3.80 -0.5257366\r\n4 Robert Hunter 14 Robert Hunter        313       12.52 -0.1735142\r\n5  Jerry Garcia  7  Jerry Garcia        328       13.12 -0.2551417\r\n     EV_cent  reflect_EV  derive_EV      close   between      burt\r\n1 0.18725953 0.040709421 0.14655011 0.01754386 121.65948 0.3367355\r\n2 0.15133380 0.022140576 0.12919322 0.01666667  90.39664 0.4521996\r\n3 0.07985305 0.009031643 0.07082141 0.01515152  44.02857 0.5404552\r\n4 1.00000000 0.371327549 0.62867245 0.01587302  24.10682 0.6332636\r\n5 0.96094165 0.332625452 0.62831620 0.01562500  16.58436 0.5061908\r\n\r\nThe most immediate observations I have is that the highest degree\r\nnode (Jerry Garcia) is not the node with the highest scoring\r\nbetweenness. That goes to Bob Weir, who is still a relatively high\r\ndegree node, but significantly lower than Jerry Garcia given that his\r\nbetweenness score is so much higher (~121 compared to Garcia’s ~16).\r\nI can make a guess that the two highest degree nodes, Jerry Garcia\r\nand Robert Hunter, having relatively low betweenness scores can be\r\nlinked to the fact that the two wrote mostly together. Although the pair\r\nwrote the most songs in the originals catalog, Bob Weir wrote many songs\r\nwith a variety of other songwrriters; giving him a higher level of\r\nbetweenness.\r\nSimilarly, Phil Lesh and Pigpen, original band members who wrote\r\nrelatively fewer songs, contributed to more songs that were written by\r\nthe entire band, giving them more exposure to connections on the songs\r\nthat they did write.\r\nTop Closeness\r\nNow a look at the top closeness scores:\r\n\r\n\r\nShow code\r\n\r\ncentrality_gd_igraph %>%\r\n  arrange(desc(close))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X id            name degree_all degree_norm\r\n1        Bob Weir 25        Bob Weir        213        8.52\r\n2       Phil Lesh 17       Phil Lesh        149        5.96\r\n3   Robert Hunter 14   Robert Hunter        313       12.52\r\n4    Jerry Garcia  7    Jerry Garcia        328       13.12\r\n5 Bill Kreutzmann 15 Bill Kreutzmann        100        4.00\r\n    BC_power    EV_cent  reflect_EV  derive_EV      close    between\r\n1 -0.5430836 0.18725953 0.040709421 0.14655011 0.01754386 121.659478\r\n2 -0.1806656 0.15133380 0.022140576 0.12919322 0.01666667  90.396640\r\n3 -0.1735142 1.00000000 0.371327549 0.62867245 0.01587302  24.106816\r\n4 -0.2551417 0.96094165 0.332625452 0.62831620 0.01562500  16.584364\r\n5 -0.7011548 0.09223647 0.009710558 0.08252591 0.01538462   3.132042\r\n       burt\r\n1 0.3367355\r\n2 0.4521996\r\n3 0.6332636\r\n4 0.5061908\r\n5 0.5159787\r\n\r\nThis evaluation is more difficult as the range is made up of much\r\nless clearly defined scores.\r\nNetwork Constraint (Burt)\r\nConstraint is a measure of the redundancy of a node’s connections. It\r\nis bound between 0 and 1, with 0 being a complete lack, and 1 being\r\ncomplete redundancy.\r\n\r\n\r\nShow code\r\n\r\ncentrality_gd_igraph %>%\r\n  arrange(desc(burt))%>%\r\n  slice(1:5)\r\n\r\n\r\n               X id           name degree_all degree_norm    BC_power\r\n1    John Dawson  5    John Dawson          4        0.16  0.09708065\r\n2  Eric Andersen  1  Eric Andersen          3        0.12 -0.28021531\r\n3 Andrew Charles  4 Andrew Charles          3        0.12  0.08220268\r\n4  Gerrit Graham 10  Gerrit Graham          3        0.12 -0.28021531\r\n5      Ned Lagin 16      Ned Lagin          3        0.12  0.08220268\r\n      EV_cent reflect_EV   derive_EV      close between     burt\r\n1 0.007176110   4.75e-05 0.007128586 0.01204819       0 1.294524\r\n2 0.000685280   8.51e-06 0.000676768 0.01250000       0 1.000000\r\n3 0.000553809   9.47e-06 0.000544343 0.01204819       0 1.000000\r\n4 0.000685280   8.51e-06 0.000676768 0.01250000       0 1.000000\r\n5 0.000553809   9.47e-06 0.000544343 0.01204819       0 1.000000\r\n\r\nAfter all the closeness calculations, I saved the data frame for\r\nfurther analysis.\r\n\r\n\r\nShow code\r\n\r\n#centrality_gd_igraph <-data.frame(id=1:vcount(gd_network_ig),\r\n                        #name=V(gd_network_ig)$name,\r\n                        #degree_all=igraph::degree(gd_network_ig),\r\n                        #degree_norm=igraph::degree(gd_network_ig,normalized=T),\r\n                        #BC_power=power_centrality(gd_network_ig),\r\n                        #EV_cent=centr_eigen(gd_network_ig,directed = F)$vector,\r\n                        #reflect_EV=gd_reflective*centr_eigen(gd_network_ig,directed = F)$vector,\r\n                        #derive_EV=gd_derived*centr_eigen(gd_network_ig,directed = F)$vector,\r\n                        #close=closeness(gd_network_ig),\r\n                        #between=betweenness(gd_network_ig, directed=FALSE),\r\n                        #burt=constraint(gd_network_ig))\r\n\r\n#write.csv(centrality_gd_igraph, file = \"centrality_df.csv\")\r\n\r\n\r\n\r\nNetwork Analysis: Statnet\r\nHow about the statnet object\r\n\r\n\r\nShow code\r\n\r\nprint(gd_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 52 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = 26 \r\n  total edges= 156 \r\n    missing edges= 0 \r\n    non-missing edges= 156 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\nNext, looking at the network basics. For some reason, statnet is\r\nrecognizing the network as bipartite but it is listing the nodes from\r\neach sde of the projection, so they are listed twice.\r\n\r\n\r\n#List network attributes: statnet\r\n\r\nnetwork::list.vertex.attributes(gd_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nnetwork::list.edge.attributes(gd_statnet)\r\n\r\n\r\n[1] \"na\"\r\n\r\nhead(gd_statnet %v% \"na\")\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\ngd_statnet %v% \"vertex.names\"\r\n\r\n\r\n [1] \"Eric Andersen\"   \"John Barlow\"     \"Bob Bralove\"    \r\n [4] \"Andrew Charles\"  \"John Dawson\"     \"Willie Dixon\"   \r\n [7] \"Jerry Garcia\"    \"Donna Godchaux\"  \"Keith Godchaux\" \r\n[10] \"Gerrit Graham\"   \"Frank Guida\"     \"Mickey Hart\"    \r\n[13] \"Bruce Hornsby\"   \"Robert Hunter\"   \"Bill Kreutzmann\"\r\n[16] \"Ned Lagin\"       \"Phil Lesh\"       \"Peter Monk\"     \r\n[19] \"Brent Mydland\"   \"Dave Parker\"     \"Robert Petersen\"\r\n[22] \"Pigpen\"          \"Joe Royster\"     \"Rob Wasserman\"  \r\n[25] \"Bob Weir\"        \"Vince Welnick\"   \"Eric Andersen\"  \r\n[28] \"John Barlow\"     \"Bob Bralove\"     \"Andrew Charles\" \r\n[31] \"John Dawson\"     \"Willie Dixon\"    \"Jerry Garcia\"   \r\n[34] \"Donna Godchaux\"  \"Keith Godchaux\"  \"Gerrit Graham\"  \r\n[37] \"Frank Guida\"     \"Mickey Hart\"     \"Bruce Hornsby\"  \r\n[40] \"Robert Hunter\"   \"Bill Kreutzmann\" \"Ned Lagin\"      \r\n[43] \"Phil Lesh\"       \"Peter Monk\"      \"Brent Mydland\"  \r\n[46] \"Dave Parker\"     \"Robert Petersen\" \"Pigpen\"         \r\n[49] \"Joe Royster\"     \"Rob Wasserman\"   \"Bob Weir\"       \r\n[52] \"Vince Welnick\"  \r\n\r\nhead(gd_statnet %e% \"LDC_topic\")\r\n\r\n\r\nNULL\r\n\r\n\r\n\r\nShow code\r\n\r\n#List network attributes: statnet\r\n\r\nsna::dyad.census(gd_statnet)\r\n\r\n\r\n     Mut Asym Null\r\n[1,] 156    0 1170\r\n\r\nShow code\r\n\r\nsna::triad.census(gd_statnet)\r\n\r\n\r\n       003 012  102 021D 021U 021C 111D 111U 030T 030C  201 120D 120U\r\n[1,] 15556   0 5288    0    0    0    0    0    0    0 1256    0    0\r\n     120C 210 300\r\n[1,]    0   0   0\r\n\r\n\r\n\r\nShow code\r\n\r\n#network transitivity: statnet\r\ngtrans(gd_statnet)\r\n\r\n\r\n[1] 0.5240964\r\n\r\n\r\n\r\nShow code\r\n\r\nnetwork.density(gd_statnet)\r\n\r\n\r\n[1] 0.1176471\r\n\r\n\r\n\r\nShow code\r\n\r\nsna::degree(gd_statnet)\r\n\r\n\r\n [1]  4  8 12  4  6  6 22 14 16  4  6 16  2 24 20  4 30  4 10 12  6 18\r\n[23]  6 12 36 10  4  8 12  4  6  6 22 14 16  4  6 16  2 24 20  4 30  4\r\n[45] 10 12  6 18  6 12 36 10\r\n\r\n\r\n\r\nShow code\r\n\r\nstat_nodes<-data.frame(name=gd_statnet%v%\"vertex.names\", degree=sna::degree(gd_statnet))\r\nhead(stat_nodes)\r\n\r\n\r\n            name degree\r\n1  Eric Andersen      4\r\n2    John Barlow      8\r\n3    Bob Bralove     12\r\n4 Andrew Charles      4\r\n5    John Dawson      6\r\n6   Willie Dixon      6\r\n\r\nShow code\r\n\r\nsummary(stat_nodes)\r\n\r\n\r\n     name               degree  \r\n Length:52          Min.   : 2  \r\n Class :character   1st Qu.: 6  \r\n Mode  :character   Median :10  \r\n                    Mean   :12  \r\n                    3rd Qu.:16  \r\n                    Max.   :36  \r\n\r\n\r\n\r\nisolates(gd_statnet)\r\n\r\n\r\ninteger(0)\r\n\r\nStatnet\r\n\r\n\r\nShow code\r\n\r\n#create a dataframe of the total, in and out-degree of nodes in the stat network\r\ngd_stat_nodes <- data.frame(name=gd_statnet%v%\"vertex.names\",\r\n    totdegree=sna::degree(gd_statnet),\r\n    indegree=sna::degree(gd_statnet, cmode=\"indegree\"),\r\n    outdegree=sna::degree(gd_statnet, cmode=\"outdegree\"))\r\n\r\n#sort the top total degree of nodes in the stat network\r\narrange(gd_stat_nodes, desc(totdegree))%>%slice(1:5)\r\n\r\n\r\n           name totdegree indegree outdegree\r\n1      Bob Weir        36       18        18\r\n2      Bob Weir        36       18        18\r\n3     Phil Lesh        30       15        15\r\n4     Phil Lesh        30       15        15\r\n5 Robert Hunter        24       12        12\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-22T13:06:51-05:00",
    "input_file": "gd-network-creation.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the Grateful Network Project",
    "description": "This is an Ongoing Project Exploring the Grateful Dead Original Song Co-Writing Network",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://kbec19.github.io/Grateful-Network/"
      }
    ],
    "date": "2022-03-25",
    "categories": [
      "grateful network"
    ],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-22T13:07:15-05:00",
    "input_file": "welcome.knit.md"
  }
]
