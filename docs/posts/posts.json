[
  {
    "path": "posts/igraph-analysis/",
    "title": "Further igraph Analysis",
    "description": "Moving forward using the igraph package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "http://gratefulnetwork.live/"
      }
    ],
    "date": "2022-04-25",
    "categories": [
      "network creation",
      "network analytics",
      "network visualization"
    ],
    "contents": "\r\n\r\nContents\r\nLoading Network\r\nAffiliation Matrix\r\nBipartite Projection\r\nFrom Adjacency Matrix\r\nBasic Visualization\r\n\r\n\r\nLoading Data\r\nCentrality Data\r\nCorrelations of\r\nCentrality Measures\r\nBlockmodeling\r\nBlockmodel\r\nVisualization\r\n\r\nCommunity\r\nEigenvector Community\r\nDetection\r\nLouvain Community\r\nClustering\r\n\r\n\r\nFurther Analysis\r\nK-core Decomposition\r\n\r\n\r\n\r\n\r\n\r\nLoading Network\r\nI previously analyzed the network using igraph and statnet, and have\r\nfound that igraph primarily serves the network best.\r\nAffiliation Matrix\r\nLoading the dataset and creating the network to begin my\r\nanalysis:\r\n\r\n\r\n\r\nBipartite Projection\r\n\r\n\r\n\r\nFrom Adjacency Matrix\r\n\r\n\r\n\r\nBasic Visualization\r\n\r\n\r\n\r\nLoading Data\r\nCentrality Data\r\nI am going to load the data frame I saved from my first igraph\r\ninspection here.\r\n\r\n               X id           name degree normalized_degree\r\n1  Eric Andersen  1  Eric Andersen      3              0.12\r\n2    John Barlow  2    John Barlow     81              3.24\r\n3    Bob Bralove  3    Bob Bralove     14              0.56\r\n4 Andrew Charles  4 Andrew Charles      3              0.12\r\n5    John Dawson  5    John Dawson      4              0.16\r\n6   Willie Dixon  6   Willie Dixon      4              0.16\r\n     bonacich bonacich_scaled eigenvector reflect_eigen derive_eigen\r\n1 -0.28021531     -0.05190689 0.000685280   0.000008510  0.000676768\r\n2 -0.31662818     -0.05865199 0.017737459   0.004171627  0.013565831\r\n3 -0.22064550     -0.04087222 0.008992246   0.000239377  0.008752869\r\n4  0.08220268      0.01522717 0.000553809   0.000009470  0.000544343\r\n5  0.09708065      0.01798315 0.007176110   0.000047500  0.007128586\r\n6 -0.43204347     -0.08003144 0.000704116   0.000012400  0.000691690\r\n   closeness betweenness      burt constraint\r\n1 0.01250000   0.0000000 1.0000000  1.0000000\r\n2 0.01298701   0.6708464 0.6706222  0.6706222\r\n3 0.01333333   0.1216013 0.4989170  0.4989170\r\n4 0.01204819   0.0000000 1.0000000  1.0000000\r\n5 0.01204819   0.0000000 1.2945238  1.2945238\r\n6 0.01265823   0.0000000 0.7040590  0.7040590\r\n\r\nCorrelations of Centrality\r\nMeasures\r\n\r\n         term degree eigenvector betweenness closeness constraint\r\n1      degree                .91         .57       .52       -.31\r\n2 eigenvector    .91                     .26       .35       -.18\r\n3 betweenness    .57         .26                   .48       -.34\r\n4   closeness    .52         .35         .48                  .05\r\n5  constraint   -.31        -.18        -.34       .05           \r\n6    bonacich   -.28        -.18        -.24      -.23        .18\r\n  bonacich\r\n1     -.28\r\n2     -.18\r\n3     -.24\r\n4     -.23\r\n5      .18\r\n6         \r\n\r\n\r\n\r\n\r\nBlockmodeling\r\nIn my semester assignment posts, I looked more deeply into the role\r\nand blockmodeling of the network. In the end I was able to find a model\r\nthat represents the network most intuitively - the optimized 5-partition\r\nblockmodel.\r\n\r\n\r\n\r\n\r\nBlockmodel Visualization\r\nI can assign “block.membership” as a vertex attribute to my\r\n5-partition blockmodel, then use the role attribute to change the color\r\nof plotted nodes in a network plot.\r\n\r\n\r\n\r\n ## Centrality by Network Role\r\nI am changing the centrality table created earlier and adding the\r\nrole assignments from the “blockmodel” calculations to summarize average\r\nnode measures of centrality by role. This table is really becoming more\r\nof a ‘node feature’ data frame.\r\n\r\n  eigenvector reflect_eigen derive_eigen  closeness betweenness\r\n1 0.000685280   0.000008510  0.000676768 0.01250000   0.0000000\r\n2 0.017737459   0.004171627  0.013565831 0.01298701   0.6708464\r\n3 0.008992246   0.000239377  0.008752869 0.01333333   0.1216013\r\n4 0.000553809   0.000009470  0.000544343 0.01204819   0.0000000\r\n5 0.007176110   0.000047500  0.007128586 0.01204819   0.0000000\r\n6 0.000704116   0.000012400  0.000691690 0.01265823   0.0000000\r\n       burt constraint\r\n1 1.0000000  1.0000000\r\n2 0.6706222  0.6706222\r\n3 0.4989170  0.4989170\r\n4 1.0000000  1.0000000\r\n5 1.2945238  1.2945238\r\n6 0.7040590  0.7040590\r\n\r\nCommunity\r\nDuring the semester assignments, I investigated multiple community\r\nstructures and the corresponding community scores. I’ll load the matrix\r\nof community modularity scores first.\r\n\r\n   community modularity\r\n1 fastgreedy 0.27928994\r\n2   walktrap 0.24823554\r\n3      label 0.40297240\r\n4       edge 0.40297240\r\n5      eigen 0.45402593\r\n6       spin 0.04933856\r\n\r\nOn inspection of the community structures created by each algorithm,\r\nI felt that the eigenvector community best represented the network. The\r\nmodularity scores of the communities confirm that this is a reasonable\r\nobservation. The higher modularity scores represent divisions with dense\r\nedge connections between the vertices within a community but sparse\r\nconnections between vertices in different communities ()\r\nEigenvector Community\r\nDetection\r\nThis method has created 5 communities to examine.\r\n\r\n$`1`\r\n[1] \"Eric Andersen\" \"John Barlow\"   \"Bob Bralove\"   \"Willie Dixon\" \r\n[5] \"Gerrit Graham\" \"Brent Mydland\" \"Rob Wasserman\" \"Bob Weir\"     \r\n[9] \"Vince Welnick\"\r\n\r\n$`2`\r\n[1] \"Bruce Hornsby\"\r\n\r\n$`3`\r\n[1] \"John Dawson\"   \"Jerry Garcia\"  \"Robert Hunter\"\r\n\r\n$`4`\r\n [1] \"Andrew Charles\"  \"Frank Guida\"     \"Bill Kreutzmann\"\r\n [4] \"Ned Lagin\"       \"Phil Lesh\"       \"Peter Monk\"     \r\n [7] \"Dave Parker\"     \"Robert Petersen\" \"Pigpen\"         \r\n[10] \"Joe Royster\"    \r\n\r\n$`5`\r\n[1] \"Donna Godchaux\" \"Keith Godchaux\" \"Mickey Hart\"   \r\n\r\nIgraph colors the nodes by community\r\n\r\n\r\n\r\nLouvain Community Clustering\r\nOne method I did not explore in the semester assignment was the\r\nLouvain clustering method. This method gives 7 communities that are\r\nsomewhat unexpected, but give an interesting and valid perspective on\r\nthe membership. The modularity of this method is 0.457, just above the\r\nmodularity score of the eigenvector community modularity and very\r\ncompetitive as an option.\r\n\r\n[1] 0.4574052\r\n\r\n\r\nFurther Analysis\r\nK-core Decomposition\r\nFinding the k-core where every node has degree of at least “k”.\r\n\r\n  Eric Andersen     John Barlow     Bob Bralove  Andrew Charles \r\n              3              73              12               3 \r\n    John Dawson    Willie Dixon    Jerry Garcia  Donna Godchaux \r\n              4               4             264              12 \r\n Keith Godchaux   Gerrit Graham     Frank Guida     Mickey Hart \r\n             15               3               4              34 \r\n  Bruce Hornsby   Robert Hunter Bill Kreutzmann       Ned Lagin \r\n              4             264              92               3 \r\n      Phil Lesh      Peter Monk   Brent Mydland     Dave Parker \r\n            110               3              40               7 \r\nRobert Petersen          Pigpen     Joe Royster   Rob Wasserman \r\n             13              92               4               9 \r\n       Bob Weir   Vince Welnick \r\n            135              12 \r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-09T16:52:58-04:00",
    "input_file": "igraph-analysis.knit.md"
  },
  {
    "path": "posts/gd-network-creation-statnet/",
    "title": "Grateful Network Creation: Statnet",
    "description": "Building a Grateful Dead Original Song Co-Writing Network in R using the Statnet Package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "http://gratefulnetwork.live/"
      }
    ],
    "date": "2022-04-21",
    "categories": [
      "network creation",
      "network analytics",
      "network visualization",
      "statnet"
    ],
    "contents": "\r\n\r\nContents\r\nLoad Network Data\r\nAffiliation Matrix\r\nBipartite Projection\r\n\r\nStatnet Network\r\nNetwork Features\r\nVisualization\r\n\r\nDyad & Triad Census\r\nTransitivity\r\nGeodesic Distance\r\nComponents\r\nDensity\r\n\r\nCentrality\r\nTotal Centrality\r\nEigenvector Centrality\r\nCloseness\r\nBetweenness\r\nBonacich Power\r\nAdd as Attributes\r\n\r\nCorrelations of\r\nCentrality Measures\r\n\r\n\r\n\r\n\r\nShow code\r\n\r\nlibrary(ggplot2) \r\nlibrary(readr) \r\nlibrary(statnet)\r\nlibrary(ggraph)\r\nlibrary(tidyverse)\r\nlibrary(ergm)\r\nlibrary(dplyr)\r\nlibrary(corrr)\r\nlibrary(magrittr)\r\nsuppressWarnings(expr)\r\n\r\n\r\n\r\nLoad Network Data\r\nAffiliation Matrix\r\nLoading the dataset and creating the network to begin my\r\nanalysis:\r\n\r\n\r\nShow code\r\n\r\ngd_affiliation <- read.csv('gd_affiliation_matrix.csv', row.names = 1, header = TRUE, check.names = FALSE)\r\ngd_matrix <- as.matrix(gd_affiliation)\r\n\r\n\r\n\r\nInspecting the first 8 columns of the data structure in the\r\naffiliation matrix format:\r\n\r\n\r\nShow code\r\n\r\ndim(gd_matrix)\r\n\r\n\r\n[1]  25 181\r\n\r\nShow code\r\n\r\ngd_matrix[1:10, 1:4]\r\n\r\n\r\n               Alabama Getaway Alice D Millionaire Alligator Althea\r\nEric Andersen                0                   0         0      0\r\nJohn Barlow                  0                   0         0      0\r\nBob Bralove                  0                   0         0      0\r\nAndrew Charles               0                   0         0      0\r\nJohn Dawson                  0                   0         0      0\r\nWillie Dixon                 0                   0         0      0\r\nJerry Garcia                 1                   1         0      1\r\nDonna Godchaux               0                   0         0      0\r\nKeith Godchaux               0                   0         0      0\r\nGerrit Graham                0                   0         0      0\r\n\r\nBipartite Projection\r\nNow I can create the single mode network and examine the bipartite\r\nprojection. After converting the matrix to a square adjacency matrix, I\r\ncan look at the full matrix.\r\nI can also call the adjacency matrix count for co-writing incidences\r\nbetween certain songwriters, such as between writing partners Jerry\r\nGarcia and Robert Hunter (78) and between John Barlow and Bob Weir\r\n(21).\r\n\r\n\r\nShow code\r\n\r\ngd_projection <- gd_matrix%*%t(gd_matrix)\r\ndim(gd_projection)\r\n\r\n\r\n[1] 25 25\r\n\r\nShow code\r\n\r\ngd_projection[1:10, 1:4]\r\n\r\n\r\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\r\nEric Andersen              1           0           0              0\r\nJohn Barlow                0          26           1              0\r\nBob Bralove                0           1           3              0\r\nAndrew Charles             0           0           0              1\r\nJohn Dawson                0           0           0              0\r\nWillie Dixon               0           0           0              0\r\nJerry Garcia               0           0           0              0\r\nDonna Godchaux             0           0           0              0\r\nKeith Godchaux             0           0           0              0\r\nGerrit Graham              0           0           0              0\r\n\r\nShow code\r\n\r\ngd_projection[\"Jerry Garcia\", \"Robert Hunter\"]\r\n\r\n\r\n[1] 78\r\n\r\nShow code\r\n\r\ngd_projection[\"John Barlow\", \"Bob Weir\"]\r\n\r\n\r\n[1] 21\r\n\r\nStatnet Network\r\nCoercing directly from the original affiliation matrix kept giving\r\nthe error, “Error: loops is FALSE, but\r\nx contains loops.”, even when I give the appropriate\r\narguments. I tried using the “intergraph” package to convert the network\r\nobject created in igraph, but it cannot coerce bipartite igraph\r\nnetworks.\r\n\r\nAfter the bipartite projection, I was able to create the statnet\r\nnetwork object.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\ngd_statnet <- as.network(gd_projection,\r\n               directed = FALSE, \r\n               bipartite = FALSE,\r\n               loops = FALSE,\r\n               connected = FALSE)\r\n\r\nnetwork.stat<-network(gd_projection, directed=F, matrix.type=\"adjacency\") \r\n\r\n\r\n\r\nNetwork Features\r\nLooking at the features of the statnet network with the appropriate\r\ncommands\r\n\r\n\r\nShow code\r\n\r\nprint(gd_statnet)\r\n\r\n\r\n Network attributes:\r\n  vertices = 25 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 65 \r\n    missing edges= 0 \r\n    non-missing edges= 65 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\nShow code\r\n\r\nnetwork::list.vertex.attributes(gd_statnet)\r\n\r\n\r\n[1] \"na\"           \"vertex.names\"\r\n\r\nShow code\r\n\r\nnetwork::list.edge.attributes(gd_statnet)\r\n\r\n\r\n[1] \"na\"\r\n\r\nShow code\r\n\r\ngd_statnet\r\n\r\n\r\n Network attributes:\r\n  vertices = 25 \r\n  directed = FALSE \r\n  hyper = FALSE \r\n  loops = FALSE \r\n  multiple = FALSE \r\n  bipartite = FALSE \r\n  total edges= 65 \r\n    missing edges= 0 \r\n    non-missing edges= 65 \r\n\r\n Vertex attribute names: \r\n    vertex.names \r\n\r\nNo edge attributes\r\n\r\nVisualization\r\nAnd a first look at the basic network structure\r\n\r\n\r\nShow code\r\n\r\nplot(gd_statnet)\r\n\r\n\r\n\r\n\r\nDyad & Triad Census\r\nLooking at the dyad/triad census info, I have a total of 2600 triads,\r\nwhich is in line with the results I got in igraph as well.\r\n\r\n\r\nShow code\r\n\r\nsna::dyad.census(gd_statnet)\r\n\r\n\r\n     Mut Asym Null\r\n[1,]  65    0  235\r\n\r\nShow code\r\n\r\nsna::triad.census(gd_statnet)\r\n\r\n\r\n      003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U\r\n[1,] 1216   0 760    0    0    0    0    0    0    0 237    0    0\r\n     120C 210 300\r\n[1,]    0   0  87\r\n\r\nShow code\r\n\r\nsum(triad.census(gd_statnet))\r\n\r\n\r\n[1] 2300\r\n\r\nTransitivity\r\nLooking next at the network transitivity, I can confirm that it is\r\nthe same as the igraph network transitivity score of 0.5241.\r\n\r\n\r\nShow code\r\n\r\ngtrans(gd_statnet)\r\n\r\n\r\n[1] 0.5240964\r\n\r\nGeodesic Distance\r\nLooking at the geodesic distance tells me that on average, I can\r\nconfirm that the path length in statnet is 1.93, which is not\r\nsignificantly different than result from igraph of 2.01.\r\n\r\n\r\nShow code\r\n\r\ngd_gd <- geodist(gd_statnet,na.omit = TRUE, ignore.eval = TRUE, inf.replace = 0)\r\nmean(gd_gd$gdist)\r\n\r\n\r\n[1] 1.9296\r\n\r\nComponents\r\nI can determine that there is one component in the statnet network\r\nobject, as in igraph - 25 songwriters in the giant component and no\r\nisolates.\r\n\r\n\r\nShow code\r\n\r\ncomponents(gd_statnet)\r\n\r\n\r\n[1] 1\r\n\r\nDensity\r\nIn this case, the statnet output is far different from the igraph\r\noutput of ~2.1, so I am not sure what is happening with this aspect of\r\nthe calculation.\r\n\r\n\r\nShow code\r\n\r\nnetwork.density(gd_statnet)\r\n\r\n\r\n[1] 0.2166667\r\n\r\nCentrality\r\nTotal Centrality\r\nCalculating the total centrality degree as well as the “in-degree\r\ncentrality” and “out-degree centrality” clearly uses a different scale\r\nthan igraph.\r\n\r\n\r\nShow code\r\n\r\ngd_stat_nodes <- data.frame(name=gd_statnet%v%\"vertex.names\",\r\n    totdegree=sna::degree(gd_statnet),\r\n    indegree=sna::degree(gd_statnet, cmode=\"indegree\"),\r\n    outdegree=sna::degree(gd_statnet, cmode=\"outdegree\"))\r\nrescaled_degree <- degree(gd_statnet, g=1, gmode=\"graph\", \r\n        diag=FALSE, tmaxdev=FALSE, \r\n        cmode=\"freeman\", rescale=TRUE)\r\ngd_stat_nodes$rescaled <- rescaled_degree\r\n#sort the top total degree of nodes in the stat network\r\narrange(gd_stat_nodes, desc(totdegree))%>%slice(1:5)\r\n\r\n\r\n             name totdegree indegree outdegree   rescaled\r\n1        Bob Weir        34       17        17 0.13076923\r\n2       Phil Lesh        28       14        14 0.10769231\r\n3   Robert Hunter        22       11        11 0.08461538\r\n4    Jerry Garcia        20       10        10 0.07692308\r\n5 Bill Kreutzmann        18        9         9 0.06923077\r\n\r\nThe statnet total degree scores are again, very different from\r\nigraph. In igraph, Jerry Garcia is the highest degree node, which gels\r\nwith my hypothesis given his position as the practical and figurative\r\nhead of the band and the fact that he contributed to more songs than any\r\nother songwriter.\r\nHowever, more surprising than Jerry Garcia’s position in fourth in\r\nhighest total degree centrality is his songwriting partner Robert\r\nHunter’s position above him in third highest.\r\nI can understand how Bob Weir has a high centrality despite lower\r\nsong counts given his high Eigenvector centrality and betweenness status\r\nin previous igraph evaluations. However, I am surprised by his position\r\nas highest total degree and even more surprised that Phil Lesh is second\r\nhighest total degree centrality overall. Both are co-founding members of\r\nthe band, and did contribute to many songs written by the band, but not\r\nmore than Jerry Garcia. It does not make sense to me, knowing the\r\ncontext and subject matter, that they are ranked higher than Jerry\r\nGarcia.\r\nEigenvector Centrality\r\n\r\n\r\nShow code\r\n\r\n#calculate eigenvector centrality\r\neigen <- sna::evcent(gd_statnet, gmode=\"graph\")\r\n#add to nodes data frame\r\ngd_stat_nodes$eigenvector <- eigen\r\n\r\ngd_adjacency <- as.matrix(gd_statnet)\r\ngd_adjacency_2 <- gd_adjacency %*% gd_adjacency\r\n\r\n#calculate portion of reflected centrality\r\ngd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\ngd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\r\n\r\n#calculate derived centrality\r\ngd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\ngd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\r\n\r\n#add to nodes data frame\r\ngd_stat_nodes$eigen_derived <- gd_derived\r\ngd_stat_nodes$eigen_reflective <- gd_reflective\r\n\r\n#sort the top total degree of nodes in the stat network\r\narrange(gd_stat_nodes, desc(eigenvector))%>%slice(1:5)\r\n\r\n\r\n             name totdegree indegree outdegree   rescaled eigenvector\r\n1        Bob Weir        34       17        17 0.13076923   0.4003206\r\n2       Phil Lesh        28       14        14 0.10769231   0.3539098\r\n3    Jerry Garcia        20       10        10 0.07692308   0.3305871\r\n4   Robert Hunter        22       11        11 0.08461538   0.3233581\r\n5 Bill Kreutzmann        18        9         9 0.06923077   0.3219131\r\n  eigen_derived eigen_reflective\r\n1     0.8333333        0.1666667\r\n2     0.8426966        0.1573034\r\n3     0.8837209        0.1162791\r\n4     0.8750000        0.1250000\r\n5     0.8941176        0.1058824\r\n\r\nThe most immediate observations I have, is that the highest degree\r\nnode in the igraph network, Jerry Garcia, was not the highest\r\nEigenvector centrality - but in this network Bob Weir is highest both in\r\ndegree and in Eigenvector centrality. The only change in the top five is\r\nthat Jerry Garcia moved ahead of Robert Hunter, which makes sense.\r\nThe derived and reflective scores do not make sense - I’m not sure\r\nthat the formula I used on the igraph network translates to statnet.\r\nCloseness\r\n\r\n\r\nShow code\r\n\r\n#calculate closeness\r\nclose <- closeness(gd_statnet, gmode=\"graph\")\r\n#add to nodes data frame\r\ngd_stat_nodes$closeness <- close\r\n#sort the top total degree of nodes in the stat network\r\narrange(gd_stat_nodes, desc(closeness))%>%slice(1:5)\r\n\r\n\r\n             name totdegree indegree outdegree   rescaled eigenvector\r\n1        Bob Weir        34       17        17 0.13076923   0.4003206\r\n2       Phil Lesh        28       14        14 0.10769231   0.3539098\r\n3   Robert Hunter        22       11        11 0.08461538   0.3233581\r\n4    Jerry Garcia        20       10        10 0.07692308   0.3305871\r\n5 Bill Kreutzmann        18        9         9 0.06923077   0.3219131\r\n  eigen_derived eigen_reflective closeness\r\n1     0.8333333        0.1666667 0.7741935\r\n2     0.8426966        0.1573034 0.7058824\r\n3     0.8750000        0.1250000 0.6486486\r\n4     0.8837209        0.1162791 0.6315789\r\n5     0.8941176        0.1058824 0.6153846\r\n\r\nThe closeness scores are similar to overall degree centrality, at\r\nleast in the top scores, and these are also in line with the igraph\r\nresults.\r\nBetweenness\r\n\r\n\r\nShow code\r\n\r\n#calculate betweenness\r\nbetween <- sna::betweenness(gd_statnet, gmode=\"graph\")\r\n#add to nodes data frame\r\ngd_stat_nodes$betweenness <- between\r\n#sort the top total degree of nodes in the stat network\r\narrange(gd_stat_nodes, desc(betweenness))%>%slice(1:5)\r\n\r\n\r\n           name totdegree indegree outdegree   rescaled eigenvector\r\n1      Bob Weir        34       17        17 0.13076923   0.4003206\r\n2     Phil Lesh        28       14        14 0.10769231   0.3539098\r\n3        Pigpen        16        8         8 0.06153846   0.2438925\r\n4 Robert Hunter        22       11        11 0.08461538   0.3233581\r\n5  Jerry Garcia        20       10        10 0.07692308   0.3305871\r\n  eigen_derived eigen_reflective closeness betweenness\r\n1     0.8333333        0.1666667 0.7741935   111.73333\r\n2     0.8426966        0.1573034 0.7058824    89.40000\r\n3     0.8857143        0.1142857 0.6000000    44.20000\r\n4     0.8750000        0.1250000 0.6486486    30.45000\r\n5     0.8837209        0.1162791 0.6315789    13.23333\r\n\r\nAgain, when comparing these results to the igraph results, the\r\nhighest degree node (Jerry Garcia) was not the node with the highest\r\nscoring betweenness. In the statnet network, the highest degree node,\r\nBob Weir, is also the highest betweenness score, and by a significantly\r\nsimilar ratio to Garcia as in the igraph network evaluation.\r\nSimilarly to igraph, Pigpen jumps up in the rankings for betweenness,\r\nlikely because his contributions were primarily full-band\r\ncompositions.\r\nBonacich Power\r\n\r\n\r\nShow code\r\n\r\n#calculate bonacich power\r\nbonpow <- sna::bonpow(gd_statnet, gmode=\"graph\")\r\n#add to nodes data frame\r\ngd_stat_nodes$bonacich <- bonpow\r\n#sort the top total degree of nodes in the stat network\r\narrange(gd_stat_nodes, desc(bonacich))%>%slice(1:5)\r\n\r\n\r\n            name totdegree indegree outdegree    rescaled eigenvector\r\n1 Donna Godchaux        12        6         6 0.046153846  0.23834221\r\n2   Willie Dixon         4        2         2 0.015384615  0.06423801\r\n3  Eric Andersen         2        1         1 0.007692308  0.04883644\r\n4  Gerrit Graham         2        1         1 0.007692308  0.04883644\r\n5    Joe Royster         4        2         2 0.015384615  0.03388727\r\n  eigen_derived eigen_reflective closeness betweenness    bonacich\r\n1     0.9062500       0.09375000 0.5454545           0  0.29459882\r\n2     0.9090909       0.09090909 0.4528302           0  0.26898153\r\n3     0.9411765       0.05882353 0.4444444           0  0.02561729\r\n4     0.9411765       0.05882353 0.4444444           0  0.02561729\r\n5     0.8000000       0.20000000 0.3870968           0 -0.07044754\r\n\r\nShow code\r\n\r\nwrite.csv(gd_stat_nodes, file = \"gd_stat_nodes.csv\")\r\n\r\n\r\n\r\nAdd as Attributes\r\n\r\n\r\nShow code\r\n\r\ngd_statnet %v% \"degree\"<- degree(gd_statnet)       # Degree centrality\r\ngd_statnet %v% \"eigenvector\"<- evcent(gd_statnet)       # Eigenvector centrality\r\ngd_statnet %v% \"closeness\"<- closeness(gd_statnet)    # Closeness centrality\r\ngd_statnet %v% \"betweenness\"<- betweenness(gd_statnet)  # Vertex betweenness centrality\r\ngd_statnet %v% \"bonacich\"<- bonpow(gd_statnet) # Bonacich power\r\n\r\n\r\n\r\nCorrelations of Centrality\r\nMeasures\r\n\r\n\r\nShow code\r\n\r\ncorrelations <- gd_stat_nodes %>% \r\n  select(totdegree,eigenvector,betweenness,closeness,bonacich)%>%\r\n  correlate() %>%\r\n  rearrange()\r\nfashion(correlations)\r\n\r\n\r\n         term closeness totdegree eigenvector betweenness bonacich\r\n1   closeness                 .97         .96         .79     -.36\r\n2   totdegree       .97                   .95         .83     -.32\r\n3 eigenvector       .96       .95                     .65     -.28\r\n4 betweenness       .79       .83         .65                 -.25\r\n5    bonacich      -.36      -.32        -.28        -.25         \r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/gd-network-creation-statnet/network.png",
    "last_modified": "2022-05-09T22:37:48-04:00",
    "input_file": "gd-network-creation-statnet.knit.md",
    "preview_width": 10102,
    "preview_height": 8426
  },
  {
    "path": "posts/gd-network-creation/",
    "title": "Grateful Network Creation: igraph",
    "description": "Building a Grateful Dead Original Song Co-Writing Network in R Using the igraph Package",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "http://gratefulnetwork.live/"
      }
    ],
    "date": "2022-04-20",
    "categories": [
      "network creation",
      "network analytics",
      "network visualization",
      "igraph"
    ],
    "contents": "\r\n\r\nContents\r\nNetwork Details\r\nBackground\r\nAffiliation Matrix\r\nBipartite Projection\r\nigraph\r\n\r\nNetwork Analysis: igraph\r\nFrom Incidence Matrix\r\nFrom Adjacency\r\nMatrix (Bipartite Projection)\r\nTriad Check\r\nTransitivity\r\nGeodesic Distance\r\nComponents\r\nDensity\r\nDegree Measure\r\nSummary Statistics\r\nNetwork Visualizations\r\nCentrality Measures\r\n\r\n\r\n\r\nNetwork Details\r\nBackground\r\nFor my project, I am using the Grateful Dead song writers data set\r\nthat I used in this series of posts from my Social & Political\r\nNetworks course to examine the network features of the co-writers of\r\noriginal Grateful Dead songs.\r\nThe data set consists of the links between co-writers of songs played\r\nby the Grateful Dead over their 30-year touring career that I\r\ncompiled.\r\nThere are 25 songwriters that contributed to the songs played over\r\nthe course of the Grateful Dead history, resulting in 25 nodes in the\r\ndataset.\r\nThere are a total of 181 (updated and still under review!) unique\r\nsongs played in the course of their touring career, and the various\r\ncombinations of co-writing combinations are now represented in a binary\r\naffiliation matrix.\r\nI have considered using various measures as network weights, but in\r\nthe end they have all been attributes and not weights. Unless there is a\r\nnew metric that rises to the forefront of my analysis, this network will\r\ncontinue to begin analysis as an un-weighted, bipartite matrix.\r\n\r\n\r\n\r\nAffiliation Matrix\r\nLoading the dataset and creating the network to begin my\r\nanalysis:\r\n\r\n\r\nShow code\r\n\r\ngd_affiliation <- read.csv('gd_affiliation_matrix.csv', row.names = 1, header = TRUE, check.names = FALSE)\r\ngd_matrix <- as.matrix(gd_affiliation)\r\n\r\n\r\n\r\nInspecting the first 8 columns of the data structure in the\r\naffiliation matrix format:\r\n\r\n\r\nShow code\r\n\r\ndim(gd_matrix)\r\n\r\n\r\n[1]  25 181\r\n\r\nShow code\r\n\r\ngd_matrix[1:10, 1:4]\r\n\r\n\r\n               Alabama Getaway Alice D Millionaire Alligator Althea\r\nEric Andersen                0                   0         0      0\r\nJohn Barlow                  0                   0         0      0\r\nBob Bralove                  0                   0         0      0\r\nAndrew Charles               0                   0         0      0\r\nJohn Dawson                  0                   0         0      0\r\nWillie Dixon                 0                   0         0      0\r\nJerry Garcia                 1                   1         0      1\r\nDonna Godchaux               0                   0         0      0\r\nKeith Godchaux               0                   0         0      0\r\nGerrit Graham                0                   0         0      0\r\n\r\nBipartite Projection\r\nNow I can create the single mode network and examine the bipartite\r\nprojection. After converting the matrix to a square adjacency matrix, I\r\ncan look at the full matrix.\r\nI can also call the adjacency matrix count for co-writing incidences\r\nbetween certain songwriters, such as between writing partners Jerry\r\nGarcia and Robert Hunter (78) and between John Barlow and Bob Weir\r\n(21).\r\n\r\n\r\nShow code\r\n\r\ngd_projection <- gd_matrix%*%t(gd_matrix)\r\ndim(gd_projection)\r\n\r\n\r\n[1] 25 25\r\n\r\nShow code\r\n\r\ngd_projection[1:10, 1:4]\r\n\r\n\r\n               Eric Andersen John Barlow Bob Bralove Andrew Charles\r\nEric Andersen              1           0           0              0\r\nJohn Barlow                0          26           1              0\r\nBob Bralove                0           1           3              0\r\nAndrew Charles             0           0           0              1\r\nJohn Dawson                0           0           0              0\r\nWillie Dixon               0           0           0              0\r\nJerry Garcia               0           0           0              0\r\nDonna Godchaux             0           0           0              0\r\nKeith Godchaux             0           0           0              0\r\nGerrit Graham              0           0           0              0\r\n\r\nShow code\r\n\r\ngd_projection[\"Jerry Garcia\", \"Robert Hunter\"]\r\n\r\n\r\n[1] 78\r\n\r\nShow code\r\n\r\ngd_projection[\"John Barlow\", \"Bob Weir\"]\r\n\r\n\r\n[1] 21\r\n\r\nigraph\r\nFrom Incidence Matrix\r\nConverting network data into igraph object using the\r\n“graph_from_incidence_matrix()” function gave me all songwriters and\r\nsongs as total vertices. Graphing after the bipartite projection allowed\r\na more accurate network.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\ngd_igraph_from_im <- graph_from_incidence_matrix(gd_affiliation, directed = FALSE)\r\n\r\n\r\n\r\nFrom Adjacency Matrix\r\nConverting network data into igraph object using the\r\n“graph_from_incidence_matrix()” function gave me all songwriters and\r\nsongs as total vertices. Graphing after the bipartite projection allowed\r\na more accurate network.\r\n\r\n\r\nShow code\r\n\r\nset.seed(11)\r\ngd_igraph_adj <- graph.adjacency(gd_projection,mode=\"undirected\")\r\n\r\n\r\n\r\nNetwork Analysis: igraph\r\nNow to check the vertices in the graph I’ve created to ensure they\r\nrepresent the data accurately, and confirm that all of the attributes\r\nhave been represented properly (the graph is undirected, unweighted, and\r\nis bipartite):\r\nFrom Incidence Matrix\r\n\r\n\r\nhead(V(gd_igraph_from_im)$name)\r\n\r\n\r\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \r\n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \r\n\r\nhead(V(gd_igraph_from_im)$type)\r\n\r\n\r\n[1] FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\nis_directed(gd_igraph_from_im)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_weighted(gd_igraph_from_im)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_bipartite(gd_igraph_from_im)\r\n\r\n\r\n[1] TRUE\r\n\r\nigraph::vertex_attr_names(gd_igraph_from_im)\r\n\r\n\r\n[1] \"type\" \"name\"\r\n\r\nigraph::edge_attr_names(gd_igraph_from_im)\r\n\r\n\r\ncharacter(0)\r\n\r\nGraphing directly from the incidence matrix gives a bipartite\r\nnetwork, but when visualizing the network it is not clear if this is the\r\nway I want to represent this data.\r\n\r\n\r\nShow code\r\n\r\nplot(gd_igraph_from_im, layout=layout.bipartite)\r\n\r\n\r\n\r\n\r\nFrom Adjacency\r\nMatrix (Bipartite Projection)\r\n\r\n\r\nhead(V(gd_igraph_adj)$name)\r\n\r\n\r\n[1] \"Eric Andersen\"  \"John Barlow\"    \"Bob Bralove\"   \r\n[4] \"Andrew Charles\" \"John Dawson\"    \"Willie Dixon\"  \r\n\r\nhead(V(gd_igraph_adj)$type)\r\n\r\n\r\nNULL\r\n\r\nis_directed(gd_igraph_adj)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_weighted(gd_igraph_adj)\r\n\r\n\r\n[1] FALSE\r\n\r\nis_bipartite(gd_igraph_adj)\r\n\r\n\r\n[1] FALSE\r\n\r\nigraph::vertex_attr_names(gd_igraph_adj)\r\n\r\n\r\n[1] \"name\"\r\n\r\nigraph::edge_attr_names(gd_igraph_adj)\r\n\r\n\r\ncharacter(0)\r\n\r\nGraphing from the bipartite projection and using the graph from\r\nadjacency matrix function, I have a network of the songwriters only, but\r\nI need to do more digging to see if this is the best way to represent\r\nthe data.\r\n\r\n\r\nShow code\r\n\r\nplot(gd_igraph_adj)\r\n\r\n\r\n\r\n\r\nTriad Check\r\nKnowing this network has 25 vertices, I want to see if the triad\r\ncensus is working correctly by comparing the following data:\r\n\r\n\r\nShow code\r\n\r\n#possible triads in network\r\n25*24*23/6\r\n\r\n\r\n[1] 2300\r\n\r\nShow code\r\n\r\nsum(igraph::triad.census(gd_igraph_from_im))\r\n\r\n\r\n[1] 1435820\r\n\r\nThe igraph created from the incidence matrix is NOT representing the\r\ntriad census properly.\r\n\r\n\r\nShow code\r\n\r\n#possible triads in network\r\n25*24*23/6\r\n\r\n\r\n[1] 2300\r\n\r\nShow code\r\n\r\nsum(igraph::triad.census(gd_igraph_adj))\r\n\r\n\r\n[1] 2300\r\n\r\nThe igraph network created from the adjacency matrix is representing\r\nthe triad census is working the way it should be.\r\nTransitivity\r\nLooking next at the global v. average local transitivity of the\r\nnetwork:\r\n\r\n\r\nShow code\r\n\r\n#get global clustering cofficient: igraph\r\ntransitivity(gd_igraph_from_im, type=\"global\")\r\n\r\n\r\n[1] 0\r\n\r\nShow code\r\n\r\n#get average local clustering coefficient: igraph\r\ntransitivity(gd_igraph_from_im, type=\"average\")\r\n\r\n\r\n[1] 0\r\n\r\nThis is another good sign that the correct choice is to graph from\r\nthe adjacency matrix throug the bipartite projection going forward.\r\n\r\n\r\nShow code\r\n\r\n#get global clustering cofficient: igraph\r\ntransitivity(gd_igraph_adj, type=\"global\")\r\n\r\n\r\n[1] 0.5240964\r\n\r\nShow code\r\n\r\n#get average local clustering coefficient: igraph\r\ntransitivity(gd_igraph_adj, type=\"average\")\r\n\r\n\r\n[1] 0.7755587\r\n\r\nThis transitivity tells me that the average network transitivity is\r\nsignificantly higher than the global transitivity, indicating, from my\r\nstill naive network knowledge, that the overall network is generally\r\nmore loose, and that there is a more connected sub-network.\r\nGeodesic Distance\r\nLooking at the geodesic distance tells me that on average, the path\r\nlength is just over 2.\r\n\r\n\r\nShow code\r\n\r\naverage.path.length(gd_igraph_adj,directed=F)\r\n\r\n\r\n[1] 2.01\r\n\r\nComponents\r\nGetting a look at the components of the network shows that there are\r\n2 components in the network, and 25 of the 26 nodes make up the giant\r\ncomponent with 1 isolate.\r\n\r\n\r\nShow code\r\n\r\nnames(igraph::components(gd_igraph_adj))\r\n\r\n\r\n[1] \"membership\" \"csize\"      \"no\"        \r\n\r\nShow code\r\n\r\nigraph::components(gd_igraph_adj)$no \r\n\r\n\r\n[1] 1\r\n\r\nShow code\r\n\r\nigraph::components(gd_igraph_adj)$csize\r\n\r\n\r\n[1] 25\r\n\r\nThis is a great start - now I can get to looking at the network\r\ndensity, centrality, and centralization.\r\nDensity\r\nThe network density measure: First with just the call “graph.density”\r\nand then with adding “loops=TRUE”. Since I’m using igraph, I know that\r\nits’ default output assumes that loops are not included but does not\r\nremove them, which can be corrected with the addition of “loops=TRUE”\r\nper the course tutorials when comparing output to statnet. This gives me\r\nconfidence that my network density is closer to 2.26.\r\n\r\n\r\nShow code\r\n\r\ngraph.density(gd_igraph_adj)\r\n\r\n\r\n[1] 2.453333\r\n\r\nShow code\r\n\r\ngraph.density(gd_igraph_adj, loops=TRUE)\r\n\r\n\r\n[1] 2.264615\r\n\r\nDegree Measure\r\nThe network degree measure: This gives me a clear output showing the\r\ndegree of each particular node (songwriter). I will also begin creating\r\na dataframe for easier review going forward.\r\nIt is not surprising, knowing my subject matter, that Jerry Garcia is\r\nthe highest degree node in this network as the practical and figurative\r\nhead of the band. The other band members’ degree measures are not\r\nnecessarily what I expected, though. I did not anticipate that his\r\nsongwriting partner and key collaborator, Robert Hunter, would have a\r\nhigher degree than band members Phil Lesh and Bob Weir. Further, I did\r\nnot anticipate that the degree measure of band member ‘Pigpen’ would be\r\nso high given his early death in the first years of the band’s touring\r\nlife. Specifically, I’m surprised that Pigpen has a higher degree than\r\nJohn Barlow, who was the key collaborator and writing partner of Bob\r\nWeir. This tells me that the proportion of songs that Weir wrote outside\r\nof the songs written with Barlow were much more dramatic than the\r\nproportion of songs Garcia wrote outside the songs written with\r\nHunter.\r\nThe original lineup of Jerry Garcia, Bob Weir, Phil Lesh, Bill\r\nKreutzmann, and Pigpen as well as Robert Hunter’s presence in the\r\nformative years of the band’s most collaborative era, means that this\r\ndegree ranking makes sense intuitively.\r\n\r\n\r\nShow code\r\n\r\ngd_ig_nodes<-data.frame(name=V(gd_igraph_adj)$name, degree=igraph::degree(gd_igraph_adj, loops = FALSE))\r\ngd_ig_nodes$normalized <-igraph::degree(gd_igraph_adj, loops = FALSE, normalized = TRUE)\r\n\r\ngd_ig_nodes%>%\r\n  arrange(desc(degree))\r\n\r\n\r\n                           name degree normalized\r\nJerry Garcia       Jerry Garcia    142 5.91666667\r\nRobert Hunter     Robert Hunter    117 4.87500000\r\nBob Weir               Bob Weir    105 4.37500000\r\nPhil Lesh             Phil Lesh     81 3.37500000\r\nBill Kreutzmann Bill Kreutzmann     62 2.58333333\r\nPigpen                   Pigpen     51 2.12500000\r\nJohn Barlow         John Barlow     29 1.20833333\r\nMickey Hart         Mickey Hart     18 0.75000000\r\nBrent Mydland     Brent Mydland     11 0.45833333\r\nKeith Godchaux   Keith Godchaux     10 0.41666667\r\nBob Bralove         Bob Bralove      8 0.33333333\r\nVince Welnick     Vince Welnick      7 0.29166667\r\nDonna Godchaux   Donna Godchaux      6 0.25000000\r\nRob Wasserman     Rob Wasserman      6 0.25000000\r\nDave Parker         Dave Parker      5 0.20833333\r\nRobert Petersen Robert Petersen      5 0.20833333\r\nJohn Dawson         John Dawson      2 0.08333333\r\nWillie Dixon       Willie Dixon      2 0.08333333\r\nFrank Guida         Frank Guida      2 0.08333333\r\nJoe Royster         Joe Royster      2 0.08333333\r\nEric Andersen     Eric Andersen      1 0.04166667\r\nAndrew Charles   Andrew Charles      1 0.04166667\r\nGerrit Graham     Gerrit Graham      1 0.04166667\r\nNed Lagin             Ned Lagin      1 0.04166667\r\nPeter Monk           Peter Monk      1 0.04166667\r\n\r\nSummary Statistics\r\nA quick look at the summary statistics confirms for me the minimum,\r\nmaximum, median, and mean node degree data.\r\n\r\n\r\nShow code\r\n\r\nsummary(gd_ig_nodes)\r\n\r\n\r\n     name               degree         normalized     \r\n Length:25          Min.   :  1.00   Min.   :0.04167  \r\n Class :character   1st Qu.:  2.00   1st Qu.:0.08333  \r\n Mode  :character   Median :  6.00   Median :0.25000  \r\n                    Mean   : 27.04   Mean   :1.12667  \r\n                    3rd Qu.: 29.00   3rd Qu.:1.20833  \r\n                    Max.   :142.00   Max.   :5.91667  \r\n\r\nNetwork Visualizations\r\nNow I want to take a step back and try to visually represent this\r\ndata better.\r\n\r\n\r\nShow code\r\n\r\n#ggraph(gd_igraph_adj, layout = \"fr\") +\r\n  #geom_edge_link() + \r\n  #geom_node_point(aes(color = factor(color))) + \r\n  #geom_node_text(aes(label = name), repel = TRUE) +\r\n  #theme_void() +\r\n  #theme(legend.position = \"none\") \r\n\r\n\r\n\r\n\r\nThat is starting to look more meaningful!\r\n\r\n\r\nShow code\r\n\r\n# Set size to degree centrality \r\n#V(gd_igraph_adj)$size = degree=igraph::degree(gd_igraph_adj)\r\n\r\n#Additional customisation for better legibility \r\n#ggraph(gd_igraph_adj, layout = \"fr\") +\r\n  #geom_edge_arc(strength = 0.2, width = 0.5, alpha = 0.15) + \r\n  #geom_node_point(aes(size = size, color = factor(color))) + \r\n  #geom_node_text(aes(label = name, size = size), repel = TRUE) +\r\n  #theme_void() +\r\n  #theme(legend.position = \"none\") \r\n\r\n\r\n\r\n\r\nCentrality Measures\r\nTo examine additional centrality and power scores of the nodes, I\r\nadded to the data frame with the centrality degree and normalized\r\ncentrality. Now I am adding Bonacich power, rescaled Bonacich power,\r\nEigenvector centrality scores and the breakdown of reflected and derived\r\ncentrality scores. Additionally, I am adding the closeness, betweenness,\r\nand Burt centrality scores.\r\nTo calculate the reflected and derived centrality scores, I first run\r\nsome operations on the adjacency matrix and keep in mind that these two\r\nscores make up the entire calculation of the Eigenvector centrality\r\nscore.\r\n\r\n\r\nShow code\r\n\r\n#gd_adjacency <- as.matrix(as_adjacency_matrix(gd_igraph_adj))\r\n#gd_adjacency_2 <- gd_adjacency %*% gd_adjacency\r\n\r\n#calculate Bonacich power\r\n#bp_ig1 <- power_centrality(gd_igraph_adj) #with a default index of \"1\"\r\n#bp_ig2 <- power_centrality(gd_igraph_adj, rescale = TRUE) #rescaled so they sum to \"1\"\r\n\r\n#calculate portion of reflected centrality\r\n#gd_reflective <- diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\n#gd_reflective <- ifelse(is.nan(gd_reflective),0,gd_reflective)\r\n\r\n#calculate derived centrality\r\n#gd_derived <- 1-diag(as.matrix(gd_adjacency_2))/rowSums(as.matrix(gd_adjacency_2))\r\n#gd_derived <- ifelse(is.nan(gd_derived),1,gd_derived)\r\n\r\n#calculate closeness centrality: igraph\r\n#close <- igraph::closeness(gd_igraph_adj)\r\n\r\n#calculate betweenness centrality: igraph\r\n#between <- igraph::betweenness(gd_igraph_adj, directed=FALSE)\r\n\r\n#calculate Burt's network constraint\r\n#constraint <- constraint(gd_igraph_adj)\r\n\r\n#add these values to the data frame I started\r\n#gd_ig_nodes$eigenvector <- eigen\r\n#gd_ig_nodes$eigen_derived <- gd_derived\r\n#gd_ig_nodes$eigen_reflective <- gd_reflective\r\n#gd_ig_nodes$betweenness <- between\r\n#gd_ig_nodes$closeness <- close\r\n#gd_ig_nodes$bonacich <- bp_ig1\r\n#gd_ig_nodes$bonacich_rescaled <- bp_ig2\r\n#gd_ig_nodes$constraint <- constraint\r\n#options(scipen = 999)\r\n\r\ngd_ig_nodes<-read.csv(\"gd_ig_nodes.csv\")\r\nhead(gd_ig_nodes[2:7])\r\n\r\n\r\n            name degree normalized eigenvector eigen_derived\r\n1  Eric Andersen      1 0.04166667  0.04883644     0.9875776\r\n2    John Barlow     29 1.20833333  0.07763512     0.7648126\r\n3    Bob Bralove      8 0.33333333  0.12770600     0.9733796\r\n4 Andrew Charles      1 0.04166667  0.04317463     0.9829060\r\n5    John Dawson      2 0.08333333  0.07977694     0.9933775\r\n6   Willie Dixon      2 0.08333333  0.06423801     0.9823529\r\n  eigen_reflective\r\n1      0.012422360\r\n2      0.235187424\r\n3      0.026620370\r\n4      0.017094017\r\n5      0.006622517\r\n6      0.017647059\r\n\r\nEigenvector Centrality\r\nI am also interested in the Eigenvector centrality scores - Both the\r\ntop as well as the lowest value scores.\r\n\r\n\r\nShow code\r\n\r\ngd_ig_nodes%>%\r\n  arrange(desc(eigenvector))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X            name degree normalized eigenvector\r\n1        Bob Weir        Bob Weir    105   4.375000   0.4003206\r\n2       Phil Lesh       Phil Lesh     81   3.375000   0.3539098\r\n3    Jerry Garcia    Jerry Garcia    142   5.916667   0.3305871\r\n4   Robert Hunter   Robert Hunter    117   4.875000   0.3233581\r\n5 Bill Kreutzmann Bill Kreutzmann     62   2.583333   0.3219131\r\n  eigen_derived eigen_reflective betweenness  closeness   bonacich\r\n1     0.7826043        0.2173957  121.659478 0.03225806 -0.5325373\r\n2     0.8536971        0.1463029   90.396640 0.02941176 -0.1771572\r\n3     0.6538547        0.3461453   16.584364 0.02631579 -0.2501870\r\n4     0.6286725        0.3713275   24.106816 0.02702703 -0.1701447\r\n5     0.8947211        0.1052789    3.132042 0.02564103 -0.6875388\r\n  bonacich_rescaled constraint\r\n1       -0.10060043  0.3367355\r\n2       -0.03346637  0.4521996\r\n3       -0.04726227  0.5061908\r\n4       -0.03214166  0.6332636\r\n5       -0.12988143  0.5159787\r\n\r\nBob Weir having top overall Eigenvector centrality makes sense - he\r\nis a core founding member and a prolific songwriter. He did not write as\r\nmany songs as Jerry Garcia or Robert Hunter, but he wrote with a larger\r\nvariety of people.\r\nThe top derived Eigenvector centrality scores are songwriters who\r\ncontributed to songs but were outside the band member or key\r\ncollaborator circle, which again makes sense.\r\nRobert Hunter having the top reflective Eigenvector centrality score\r\nis not a shock - he has long held the unofficial title of band member\r\nand as the person behind the songwriting magic of the Grateful Dead. His\r\nprimary songwriting partner was Jerry Garcia, but he also wrote songs\r\nwith the early, full band and later with almost all of the individual\r\nmembers of the band.\r\nCloseness\r\nThe closeness centrality of a node is defined as the sum of the\r\ngeodesic distances between that node and all other nodes in a\r\nnetwork.\r\n\r\n\r\nShow code\r\n\r\ngd_ig_nodes%>%\r\n  arrange(desc(closeness))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X            name degree normalized eigenvector\r\n1        Bob Weir        Bob Weir    105   4.375000   0.4003206\r\n2       Phil Lesh       Phil Lesh     81   3.375000   0.3539098\r\n3   Robert Hunter   Robert Hunter    117   4.875000   0.3233581\r\n4    Jerry Garcia    Jerry Garcia    142   5.916667   0.3305871\r\n5 Bill Kreutzmann Bill Kreutzmann     62   2.583333   0.3219131\r\n  eigen_derived eigen_reflective betweenness  closeness   bonacich\r\n1     0.7826043        0.2173957  121.659478 0.03225806 -0.5325373\r\n2     0.8536971        0.1463029   90.396640 0.02941176 -0.1771572\r\n3     0.6286725        0.3713275   24.106816 0.02702703 -0.1701447\r\n4     0.6538547        0.3461453   16.584364 0.02631579 -0.2501870\r\n5     0.8947211        0.1052789    3.132042 0.02564103 -0.6875388\r\n  bonacich_rescaled constraint\r\n1       -0.10060043  0.3367355\r\n2       -0.03346637  0.4521996\r\n3       -0.03214166  0.6332636\r\n4       -0.04726227  0.5061908\r\n5       -0.12988143  0.5159787\r\n\r\nThis evaluation is more difficult as the range is made up of much\r\nsmaller scaled scores, but seem to be somewhat in line with the\r\nEigenvector centrality scores.\r\nIn addition to node-level centrality scores, I also want to calculate\r\nthe network level centralization index for closeness centrality\r\nmeasures. Here, I get a network level closeness measure of 0.552.\r\n\r\n\r\n#calculate closeness centralization index: igraph\r\ncentr_clo(gd_igraph_adj)$centralization\r\n\r\n\r\n[1] 0.5519071\r\n\r\nBetweenness\r\nBetweenness represents the number of geodesics on which a node\r\nsits.\r\nNow I want to take the closeness and betweenness to my centrality\r\ndata frame and first, sort by and take a look at the nodes with the\r\nhighest betweenness:\r\n\r\n\r\nShow code\r\n\r\ngd_ig_nodes%>%\r\n  arrange(desc(betweenness))%>%\r\n  slice(1:5)\r\n\r\n\r\n              X          name degree normalized eigenvector\r\n1      Bob Weir      Bob Weir    105   4.375000   0.4003206\r\n2     Phil Lesh     Phil Lesh     81   3.375000   0.3539098\r\n3        Pigpen        Pigpen     51   2.125000   0.2438925\r\n4 Robert Hunter Robert Hunter    117   4.875000   0.3233581\r\n5  Jerry Garcia  Jerry Garcia    142   5.916667   0.3305871\r\n  eigen_derived eigen_reflective betweenness  closeness   bonacich\r\n1     0.7826043        0.2173957   121.65948 0.03225806 -0.5325373\r\n2     0.8536971        0.1463029    90.39664 0.02941176 -0.1771572\r\n3     0.8868967        0.1131033    44.02857 0.02500000 -0.5155271\r\n4     0.6286725        0.3713275    24.10682 0.02702703 -0.1701447\r\n5     0.6538547        0.3461453    16.58436 0.02631579 -0.2501870\r\n  bonacich_rescaled constraint\r\n1       -0.10060043  0.3367355\r\n2       -0.03346637  0.4521996\r\n3       -0.09738708  0.5404552\r\n4       -0.03214166  0.6332636\r\n5       -0.04726227  0.5061908\r\n\r\nThe most immediate observations I have is that the highest degree\r\nnode (Jerry Garcia) is not the node with the highest scoring\r\nbetweenness. That goes to Bob Weir, who is still a relatively high\r\ndegree node, but significantly lower than Jerry Garcia given that his\r\nbetweenness score is so much higher (~121 compared to Garcia’s ~16).\r\nI can make a guess that the two highest degree nodes, Jerry Garcia\r\nand Robert Hunter, having relatively low betweenness scores can be\r\nlinked to the fact that the two wrote mostly together. Although the pair\r\nwrote the most songs in the originals catalog, Bob Weir wrote many songs\r\nwith a variety of other songwriters, as suspected by the results in the\r\ndegree scores. This would give him a higher level of betweenness.\r\nSimilarly, Phil Lesh and Pigpen, original band members who wrote\r\nrelatively fewer songs, contributed to more songs that were written by\r\nthe entire band, giving them more exposure to connections on the songs\r\nthat they did write.\r\nBonacich Power\r\nBonacich power is a bit complicated but I have taken away the concept\r\nthat it measures how powerful a node is based on the relative strength\r\nor weakness of their alters.\r\nThe lower, negative Bonacich power values imply that nodes become\r\nmore powerful as their alters become weaker; positive Bonacich power\r\nvalues imply that nodes becomemore powerful as their alters become more\r\npowerful.\r\nThe cooperative songwriting network is likely not going to be a good\r\nexample of this power compared to examining cooperative v. antagonistic\r\nrelationships.\r\n\r\n\r\nShow code\r\n\r\ngd_ig_nodes%>%\r\n  arrange(desc(bonacich))%>%\r\n  slice(1:5)\r\n\r\n\r\n                X            name degree normalized eigenvector\r\n1     Frank Guida     Frank Guida      2 0.08333333  0.03388727\r\n2     Joe Royster     Joe Royster      2 0.08333333  0.03388727\r\n3  Donna Godchaux  Donna Godchaux      6 0.25000000  0.23834221\r\n4  Keith Godchaux  Keith Godchaux     10 0.41666667  0.27350064\r\n5 Robert Petersen Robert Petersen      5 0.20833333  0.05639403\r\n  eigen_derived eigen_reflective betweenness  closeness bonacich\r\n1     0.9620253       0.03797468 0.000000000 0.01612903 3.010938\r\n2     0.9620253       0.03797468 0.000000000 0.01612903 3.010938\r\n3     0.9771689       0.02283105 0.000000000 0.02272727 1.206495\r\n4     0.9820014       0.01799856 0.009345794 0.02325581 1.157009\r\n5     0.9367816       0.06321839 0.000000000 0.01818182 1.096478\r\n  bonacich_rescaled constraint\r\n1         0.5687896  0.8224000\r\n2         0.5687896  0.8224000\r\n3         0.2279163  0.4514219\r\n4         0.2185680  0.5143887\r\n5         0.2071332  0.7134697\r\n\r\nNetwork Constraint (Burt)\r\nConstraint is a measure of the redundancy of a node’s connections. It\r\nis bound between 0 and 1, with 0 being a complete lack of restraint, and\r\n1 being complete redundancy.\r\n\r\n\r\nShow code\r\n\r\ngd_ig_nodes %>%\r\n  select(name,constraint)\r\n\r\n\r\n              name constraint\r\n1    Eric Andersen  1.0000000\r\n2      John Barlow  0.6706222\r\n3      Bob Bralove  0.4989170\r\n4   Andrew Charles  1.0000000\r\n5      John Dawson  1.2945238\r\n6     Willie Dixon  0.7040590\r\n7     Jerry Garcia  0.5061908\r\n8   Donna Godchaux  0.4514219\r\n9   Keith Godchaux  0.5143887\r\n10   Gerrit Graham  1.0000000\r\n11     Frank Guida  0.8224000\r\n12     Mickey Hart  0.5294014\r\n13   Robert Hunter  0.6332636\r\n14 Bill Kreutzmann  0.5159787\r\n15       Ned Lagin  1.0000000\r\n16       Phil Lesh  0.4521996\r\n17      Peter Monk  1.0000000\r\n18   Brent Mydland  0.9325133\r\n19     Dave Parker  0.5591083\r\n20 Robert Petersen  0.7134697\r\n21          Pigpen  0.5404552\r\n22     Joe Royster  0.8224000\r\n23   Rob Wasserman  0.4756234\r\n24        Bob Weir  0.3367355\r\n25   Vince Welnick  0.5216319\r\n\r\nSimilarly to the look at derived Eigenvector centrality, the highest\r\nnetwork constraint scores go to songwriters that were relatively\r\nisolated in their contributions. However, beyond that, the results are\r\nvery diverse in how they fall. The least constrained node, Bob Weir, is\r\nalso the highest Eigenvector value as well as highest in betweenness.\r\nBut second least constrained - Donna Godchaux - contributed to few\r\nsongs, but most of them full-band collaborations, does indicate to me\r\nmore of what this measure represents.\r\n\r\n\r\n\r\n",
    "preview": "posts/gd-network-creation/graph1.png",
    "last_modified": "2022-05-09T22:01:09-04:00",
    "input_file": "gd-network-creation.knit.md",
    "preview_width": 700,
    "preview_height": 432
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to the Grateful Network Project",
    "description": "This is an Ongoing Project Exploring the Grateful Dead Original Song Co-Writing Network",
    "author": [
      {
        "name": "Kristina Becvar",
        "url": "https://kbec19.github.io/Grateful-Network/"
      }
    ],
    "date": "2022-03-25",
    "categories": [
      "grateful network"
    ],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-09T16:54:23-04:00",
    "input_file": "welcome.knit.md"
  }
]
